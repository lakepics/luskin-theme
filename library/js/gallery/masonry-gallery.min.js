"use strict";!function(e){function t(t,a,i){var n,r,s,c,l=e("#gallery-container").width();return l>900?n=3:l>600?n=2:l>300&&(n=1),n>1?(r=(l-i*(n-1))/n,s=380-r,c=t-s*a):(r=l,s=380-r,1==a?c=t-s*a:2==a&&(c=l/t*t)),Math.floor(c)}function a(){var a=20,i=380,n=780,r=180,s=380;e("#gallery-container").find(".item img").each(function(){var c,l,o=e(this),f=o.attr("class").split(" ");switch(f[0]){case"w1":c=i,l=t(c,1,a);break;case"w2":c=n,l=t(c,2,a)}var h;switch(f[1]){case"h1":h=r;break;case"h2":h=s}var g=l/c,y=h*g;o.css({width:l,height:y})})}e(document).ready(function(){e("#gallery-filters").after("<span>"+e("option:selected",this).text()+"</span>"),e("#gallery-filters").click(function(t){e(this).siblings("span").remove(),e(this).after("<span>"+e("option:selected",this).text()+"</span>")}),e("#gallery-container .item > a").addClass("fancybox").attr("rel","gallery"),e(".fancybox").fancybox({padding:0,margin:[20,60,20,60]}),a(),e(window).resize(function(){a()}),e("#gallery-container").isotope({itemSelector:".item",masonry:{gutter:20}}),e("#gallery-filters").on("change",function(){var t=this.value;e("#gallery-container").isotope({filter:t})})})}(jQuery);
//# sourceMappingURL=data:application/json;base64,
