"use strict";!function(e){function t(t,a,i){var n,o,r,c,l=e("#gallery-container").width();return l>900?n=3:l>600?n=2:l>300&&(n=1),n>1?(o=(l-i*(n-1))/n,r=380-o,c=t-r*a):(r=380-l,1==a?c=t-r*a:2==a&&(c=l/t*t)),Math.floor(c)}function a(){var a,i,n,o=20,r=380,c=780,l=180,s=380;e("#gallery-container").find(".item").each(function(){if(e(this).attr("class"))for(var f,d,h=e(this).attr("class").split(" "),g=0,m=h.length;g<m;++g){switch(h[1]){case"item--width1":a=r,n=t(a,1,o);break;case"item--width2":a=c,n=t(a,2,o);break;default:a=r,n=t(a,1,o)}switch(h[2]){case"item--height1":i=l;break;case"item--height2":i=s;break;default:i=l}f=n/a,d=i*f,e(this).find("img").css({height:Math.floor(d),width:Math.floor(n)})}})}e(".fancybox").fancybox(),e(document).ready(function(){e("#gallery-filters li").on("click",function(){var t=this.className;e("#gallery-container").isotope({filter:t})})}),e(window).load(function(){e("#gallery-container .item > a").addClass("fancybox").attr("rel","gallery"),e(".fancybox").fancybox({padding:0,margin:[20,60,20,60],closeBtn:!0}),e(".fancybox-media").fancybox({padding:0,margin:[20,60,20,60],closeBtn:!0,openEffect:"none",closeEffect:"none",maxHeight:460,autoSize:!1,helpers:{media:{}}}).removeClass("external").removeAttr("target");var t=e("#gallery-container").imagesLoaded(function(){t.isotope({itemSelector:".item",masonry:{gutter:20}})});e(window).resize(function(){a()}),a()})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnJhcnkvanMvZ2FsbGVyeS9tYXNvbnJ5LWdhbGxlcnkuanMiXSwibmFtZXMiOlsiJCIsIndpZHRoQnlEZXZpY2UiLCJvcmlnV2lkdGgiLCJtdWx0aXBsaWVyIiwiZ3V0dGVyIiwiY29sdW1uTnVtIiwiY29sV2lkdGgiLCJjb2x1bW5EaWZmIiwibmV3V2lkdGgiLCJ2aWV3cG9ydCIsIndpZHRoIiwiTWF0aCIsImZsb29yIiwicmVzaXplR2FsbGVyeSIsIm9yaWdIZWlnaHQiLCJ3MSIsIncyIiwiaDEiLCJoMiIsImZpbmQiLCJlYWNoIiwidGhpcyIsImF0dHIiLCJhc3BlY3RSYXRpbyIsImhlaWdodCIsImNsYXNzZXMiLCJzcGxpdCIsImkiLCJsIiwibGVuZ3RoIiwiY3NzIiwiZmFuY3lib3giLCJkb2N1bWVudCIsInJlYWR5Iiwib24iLCJmaWx0ZXJWYWx1ZSIsImNsYXNzTmFtZSIsImlzb3RvcGUiLCJmaWx0ZXIiLCJ3aW5kb3ciLCJsb2FkIiwiYWRkQ2xhc3MiLCJwYWRkaW5nIiwibWFyZ2luIiwiY2xvc2VCdG4iLCJvcGVuRWZmZWN0IiwiY2xvc2VFZmZlY3QiLCJtYXhIZWlnaHQiLCJhdXRvU2l6ZSIsImhlbHBlcnMiLCJtZWRpYSIsInJlbW92ZUNsYXNzIiwicmVtb3ZlQXR0ciIsIiRncmlkIiwiaW1hZ2VzTG9hZGVkIiwiaXRlbVNlbGVjdG9yIiwibWFzb25yeSIsInJlc2l6ZSIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkFBQUEsY0FBQSxTQUFXQSxHQTJGUCxRQUFTQyxHQUFjQyxFQUFXQyxFQUFZQyxHQUcxQyxHQUFJQyxHQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUFXVCxFQUFFLHNCQUFzQlUsT0E2Q3ZDLE9BMUNJRCxHQUFXLElBRVhKLEVBQVksRUFFTEksRUFBVyxJQUVsQkosRUFBWSxFQUVMSSxFQUFXLE1BRWxCSixFQUFZLEdBS1pBLEVBQVksR0FFWkMsR0FBWUcsRUFBWUwsR0FBVUMsRUFBWSxJQUFPQSxFQUVyREUsRUFBYSxJQUFNRCxFQUVuQkUsRUFBV04sRUFBYUssRUFBYUosSUFJckNJLEVBQWEsSUFBTUUsRUFHRCxHQUFkTixFQUVBSyxFQUFXTixFQUFhSyxFQUFhSixFQUdoQixHQUFkQSxJQUVQSyxFQUFZQyxFQUFXUCxFQUFhQSxJQU9yQ1MsS0FBS0MsTUFBTUosR0FJdEIsUUFBU0ssS0FRTCxHQUtRWCxHQUNBWSxFQUNBSixFQVBKTixFQUFTLEdBQ0xXLEVBQUssSUFDTEMsRUFBSyxJQUNMQyxFQUFLLElBQ0xDLEVBQUssR0FNYmxCLEdBQUUsc0JBQXNCbUIsS0FBSyxTQUFTQyxLQUFLLFdBRXZDLEdBQUtwQixFQUFFcUIsTUFBTUMsS0FBSyxTQU9kLElBQU0sR0FKRkMsR0FDQUMsRUFGQUMsRUFBVXpCLEVBQUVxQixNQUFNQyxLQUFLLFNBQVNJLE1BQU0sS0FLaENDLEVBQUksRUFBR0MsRUFBSUgsRUFBUUksT0FBUUYsRUFBRUMsSUFBS0QsRUFBSSxDQU81QyxPQUFRRixFQUFRLElBRVosSUFBSyxlQUNEdkIsRUFBWWEsRUFDWkwsRUFBUVQsRUFBY0MsRUFBVyxFQUFHRSxFQUNwQyxNQUNKLEtBQUssZUFDREYsRUFBWWMsRUFDWk4sRUFBUVQsRUFBY0MsRUFBVyxFQUFHRSxFQUNwQyxNQUNKLFNBQ0lGLEVBQVlhLEVBQ1pMLEVBQVFULEVBQWNDLEVBQVcsRUFBR0UsR0FPNUMsT0FBUXFCLEVBQVEsSUFFWixJQUFLLGdCQUNEWCxFQUFhRyxDQUNiLE1BQ0osS0FBSyxnQkFDREgsRUFBYUksQ0FDYixNQUNKLFNBQ0lKLEVBQWFHLEVBTXJCTSxFQUFjYixFQUFRUixFQUd0QnNCLEVBQVNWLEVBQWFTLEVBR3RCdkIsRUFBRXFCLE1BQU1GLEtBQUssT0FBT1csS0FDaEJOLE9BQVNiLEtBQUtDLE1BQU1ZLEdBQ3BCZCxNQUFRQyxLQUFLQyxNQUFNRixRQTlOM0NWLEVBQUUsYUFBYStCLFdBQ1gvQixFQUFFZ0MsVUFBVUMsTUFBTSxXQUdkakMsRUFBRSx1QkFBdUJrQyxHQUFHLFFBQVMsV0FFakMsR0FBSUMsR0FBY2QsS0FBS2UsU0FHdkJwQyxHQUFFLHNCQUFzQnFDLFNBQ3BCQyxPQUFRSCxRQU1wQm5DLEVBQUV1QyxRQUFRQyxLQUFLLFdBR1h4QyxFQUFFLGdDQUNHeUMsU0FBVSxZQUNWbkIsS0FBSyxNQUFPLFdBQ2pCdEIsRUFBRSxhQUFhK0IsVUFDWFcsUUFBYyxFQUNkQyxRQUFlLEdBQUksR0FBSSxHQUFJLElBQzNCQyxVQUFZLElBRWhCNUMsRUFBRSxtQkFBbUIrQixVQUNqQlcsUUFBUyxFQUNUQyxRQUFTLEdBQUksR0FBSSxHQUFJLElBQ3JCQyxVQUFVLEVBQ1ZDLFdBQWMsT0FDZEMsWUFBYyxPQUNkQyxVQUFXLElBQ1hDLFVBQVUsRUFDVkMsU0FDSUMsWUFHUEMsWUFBWSxZQUNaQyxXQUFXLFNBMEJaLElBQUlDLEdBQVFyRCxFQUFFLHNCQUFzQnNELGFBQWMsV0FFaERELEVBQU1oQixTQUVKa0IsYUFBYyxRQUNkQyxTQUNFcEQsT0FBUSxPQVFkSixHQUFFdUMsUUFBUWtCLE9BQU8sV0FDYjVDLE1BSUpBLE9BdUpMNkMiLCJmaWxlIjoibGlicmFyeS9qcy9nYWxsZXJ5L21hc29ucnktZ2FsbGVyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoJCkge1xyXG4kKCcuZmFuY3lib3gnKS5mYW5jeWJveCgpO1xyXG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAvL2JpbmQgZmlsdGVyIG9uIHNlbGVjdCBjaGFuZ2VcclxuICAgICAgICAkKCcjZ2FsbGVyeS1maWx0ZXJzIGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBnZXQgZmlsdGVyIHZhbHVlIGZyb20gb3B0aW9uIHZhbHVlXHJcbiAgICAgICAgICAgIHZhciBmaWx0ZXJWYWx1ZSA9IHRoaXMuY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICAvLyB1c2UgZmlsdGVyRm4gaWYgbWF0Y2hlcyB2YWx1ZVxyXG4gICAgICAgICAgICAvLyBmaWx0ZXJWYWx1ZSA9IGZpbHRlckZuc1sgZmlsdGVyVmFsdWUgXSB8fCBmaWx0ZXJWYWx1ZTtcclxuICAgICAgICAgICAgJCgnI2dhbGxlcnktY29udGFpbmVyJykuaXNvdG9wZSh7XHJcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZpbHRlclZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgICQod2luZG93KS5sb2FkKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgLy8gaW5pdGlhbGl6aW5nIGZhbmN5Ym94XHJcbiAgICAgICAgJCgnI2dhbGxlcnktY29udGFpbmVyIC5pdGVtID4gYScpXHJcbiAgICAgICAgICAgIC5hZGRDbGFzcyggXCJmYW5jeWJveFwiIClcclxuICAgICAgICAgICAgLmF0dHIoJ3JlbCcsICdnYWxsZXJ5Jyk7XHJcbiAgICAgICAgJCgnLmZhbmN5Ym94JykuZmFuY3lib3goe1xyXG4gICAgICAgICAgICBwYWRkaW5nICAgICA6IDAsXHJcbiAgICAgICAgICAgIG1hcmdpbiAgICAgIDogWzIwLCA2MCwgMjAsIDYwXSwgLy8gSW5jcmVhc2UgbGVmdC9yaWdodCBtYXJnaW5cclxuICAgICAgICAgICAgY2xvc2VCdG4gIDogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5mYW5jeWJveC1tZWRpYScpLmZhbmN5Ym94KHtcclxuICAgICAgICAgICAgcGFkZGluZzogMCxcclxuICAgICAgICAgICAgbWFyZ2luOiBbMjAsIDYwLCAyMCwgNjBdLFxyXG4gICAgICAgICAgICBjbG9zZUJ0bjogdHJ1ZSxcclxuICAgICAgICAgICAgb3BlbkVmZmVjdCAgOiAnbm9uZScsXHJcbiAgICAgICAgICAgIGNsb3NlRWZmZWN0IDogJ25vbmUnLFxyXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IDQ2MCxcclxuICAgICAgICAgICAgYXV0b1NpemU6IGZhbHNlLFxyXG4gICAgICAgICAgICBoZWxwZXJzIDoge1xyXG4gICAgICAgICAgICAgICAgbWVkaWEgOiB7fVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAucmVtb3ZlQ2xhc3MoXCJleHRlcm5hbFwiKVxyXG4gICAgICAgIC5yZW1vdmVBdHRyKFwidGFyZ2V0XCIpO1xyXG5cclxuICAgICAgICAvLyBpc290b3BlXHJcbiAgICAgICAgLy8gJCgnI2dhbGxlcnktY29udGFpbmVyJykuaXNvdG9wZSh7XHJcbiAgICAgICAgLy8gICAgIGl0ZW1TZWxlY3RvcjogJy5pdGVtJyxcclxuICAgICAgICAvLyAgICAgbWFzb25yeToge1xyXG4gICAgICAgIC8vICAgICAgIGd1dHRlcjogMjBcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH0pO1xyXG5cclxuICAgICAgICAvLyAvLyBpbml0IElzb3RvcGVcclxuICAgICAgICAvLyB2YXIgJGdyaWQgPSAkKCcjZ2FsbGVyeS1jb250YWluZXInKS5pc290b3BlKHtcclxuICAgICAgICAvLyAgICAgLy8gb3B0aW9ucy4uLlxyXG4gICAgICAgIC8vICAgICBpdGVtU2VsZWN0b3I6ICcuaXRlbScsXHJcbiAgICAgICAgLy8gICAgIG1hc29ucnk6IHtcclxuICAgICAgICAvLyAgICAgICBndXR0ZXI6IDIwXHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgLy8gLy8gbGF5b3V0IElzb3RvcGUgYWZ0ZXIgZWFjaCBpbWFnZSBsb2Fkc1xyXG4gICAgICAgIC8vICRncmlkLmltYWdlc0xvYWRlZCgpLnByb2dyZXNzKCBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyAgICRncmlkLmlzb3RvcGUoJ2xheW91dCcpO1xyXG4gICAgICAgIC8vIH0pO1xyXG5cclxuXHJcblxyXG4gICAgICAgIHZhciAkZ3JpZCA9ICQoJyNnYWxsZXJ5LWNvbnRhaW5lcicpLmltYWdlc0xvYWRlZCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAvLyBpbml0IElzb3RvcGUgYWZ0ZXIgYWxsIGltYWdlcyBoYXZlIGxvYWRlZFxyXG4gICAgICAgICAgJGdyaWQuaXNvdG9wZSh7XHJcbiAgICAgICAgICAgIC8vIG9wdGlvbnMuLi5cclxuICAgICAgICAgICAgaXRlbVNlbGVjdG9yOiAnLml0ZW0nLFxyXG4gICAgICAgICAgICBtYXNvbnJ5OiB7XHJcbiAgICAgICAgICAgICAgZ3V0dGVyOiAyMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIC8vcmVzaXplIGdhbGxlcnkgb24gd2luZG93IGNoYW5nZVxyXG4gICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXNpemVHYWxsZXJ5KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vcmVzaXplIGdhbGxlcnkgaW5pdGlhbCBjYWxsXHJcbiAgICAgICAgcmVzaXplR2FsbGVyeSgpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHNldCB3aWR0aCBieSBkZXZpY2UgZnVuY3Rpb25cclxuICAgIGZ1bmN0aW9uIHdpZHRoQnlEZXZpY2Uob3JpZ1dpZHRoLCBtdWx0aXBsaWVyLCBndXR0ZXIpIHtcclxuXHJcbiAgICAgICAgLy8gY3JlYXRlIHZhcmlhYmxlc1xyXG4gICAgICAgIHZhciBjb2x1bW5OdW0sXHJcbiAgICAgICAgICAgIGNvbFdpZHRoLFxyXG4gICAgICAgICAgICBjb2x1bW5EaWZmLFxyXG4gICAgICAgICAgICBuZXdXaWR0aCxcclxuICAgICAgICAgICAgdmlld3BvcnQgPSAkKCcjZ2FsbGVyeS1jb250YWluZXInKS53aWR0aCgpO1xyXG5cclxuICAgICAgICAvLyBkZXRlcm1pbmUgY29sdW1uIGNvdW50XHJcbiAgICAgICAgaWYgKHZpZXdwb3J0ID4gOTAwKSB7XHJcblxyXG4gICAgICAgICAgICBjb2x1bW5OdW0gPSAzO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHZpZXdwb3J0ID4gNjAwKSB7XHJcblxyXG4gICAgICAgICAgICBjb2x1bW5OdW0gPSAyO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHZpZXdwb3J0ID4gMzAwKSB7XHJcblxyXG4gICAgICAgICAgICBjb2x1bW5OdW0gPSAxO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGR0ZXJtaW5lIGNvbHVtbiBzcGFjaW5nXHJcbiAgICAgICAgaWYgKGNvbHVtbk51bSA+IDEpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbFdpZHRoID0gKHZpZXdwb3J0IC0gKGd1dHRlciAqIChjb2x1bW5OdW0gLSAxKSkpIC8gY29sdW1uTnVtO1xyXG5cclxuICAgICAgICAgICAgY29sdW1uRGlmZiA9IDM4MCAtIGNvbFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgbmV3V2lkdGggPSBvcmlnV2lkdGggLSAoY29sdW1uRGlmZiAqIG11bHRpcGxpZXIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBjb2x1bW5EaWZmID0gMzgwIC0gdmlld3BvcnQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBzY2VuYXJpbyBmb3IgaXRlbS0td2lkdGgxO1xyXG4gICAgICAgICAgICBpZiAobXVsdGlwbGllciA9PSAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbmV3V2lkdGggPSBvcmlnV2lkdGggLSAoY29sdW1uRGlmZiAqIG11bHRpcGxpZXIpO1xyXG5cclxuICAgICAgICAgICAgLy8gc2NlbmFyaW8gZm9yIGl0ZW0tLXdpZHRoMjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtdWx0aXBsaWVyID09IDIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBuZXdXaWR0aCA9ICh2aWV3cG9ydCAvIG9yaWdXaWR0aCkgKiBvcmlnV2lkdGg7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcmV0dXJuIHdpZHRoXHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobmV3V2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNldCByZXNpemUgZ2FsbGVyeSBmdW5jdGlvblxyXG4gICAgZnVuY3Rpb24gcmVzaXplR2FsbGVyeSgpIHtcclxuXHJcbiAgICAgICAgLy9uZXcgY2xhc3Nlcy4uLlxyXG4gICAgICAgIC8vZ2FsbGVyeUhlaWdodDAxID0gaDFcclxuICAgICAgICAvL2dhbGxlcnlIZWlnaHQwMiA9IGgyXHJcbiAgICAgICAgLy9nYWxsZXJ5V2lkdGgwMSA9IHcxXHJcbiAgICAgICAgLy9nYWxsZXJ5V2lkdGgwMiA9IHcyXHJcblxyXG4gICAgICAgIHZhciBndXR0ZXIgPSAyMCxcclxuICAgICAgICAgICAgICAgIHcxID0gMzgwLFxyXG4gICAgICAgICAgICAgICAgdzIgPSA3ODAsXHJcbiAgICAgICAgICAgICAgICBoMSA9IDE4MCxcclxuICAgICAgICAgICAgICAgIGgyID0gMzgwLFxyXG4gICAgICAgICAgICAgICAgb3JpZ1dpZHRoLCBcclxuICAgICAgICAgICAgICAgIG9yaWdIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDtcclxuXHJcblxyXG4gICAgICAgICQoJyNnYWxsZXJ5LWNvbnRhaW5lcicpLmZpbmQoJy5pdGVtJykuZWFjaChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICggJCh0aGlzKS5hdHRyKCdjbGFzcycpICkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjbGFzc2VzID0gJCh0aGlzKS5hdHRyKCdjbGFzcycpLnNwbGl0KFwiIFwiKSxcclxuICAgICAgICAgICAgICAgICAgICBhc3BlY3RSYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGNsYXNzZXMubGVuZ3RoOyBpPGw7ICsraSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vayBhdCB0aGUgY2xhc3NlcyBhc3NpZ25lZCB0byB0aGUgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNob3VsZCBsb29rIHNvbWV0aGluZyBsaWtlICdjbGFzcz1cIml0ZW0gaXRlbS0td2lkdGgxIGl0ZW0tLWhlaWdodDEgZGluaW5nXCInXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgd2lkdGggYnkgbG9va2luZyBhdCB0aGUgc2Vjb25kIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yICdpdGVtLS13aWR0aDEnIG9yICdpdGVtLS13aWR0aDInXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjbGFzc2VzWzFdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaXRlbS0td2lkdGgxXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnV2lkdGggPSB3MTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gd2lkdGhCeURldmljZShvcmlnV2lkdGgsIDEsIGd1dHRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIml0ZW0tLXdpZHRoMlwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ1dpZHRoID0gdzI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHdpZHRoQnlEZXZpY2Uob3JpZ1dpZHRoLCAyLCBndXR0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnV2lkdGggPSB3MTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gd2lkdGhCeURldmljZShvcmlnV2lkdGgsIDEsIGd1dHRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIGhlaWdodCBieSBsb29raW5nIGF0IHRoZSB0aGlyZCBwb3NpdGlvbiBcclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgJ2l0ZW0tLWhlaWdodDEnIG9yICdpdGVtLS1oZWlnaHQyJ1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2xhc3Nlc1syXSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIml0ZW0tLWhlaWdodDFcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdIZWlnaHQgPSBoMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaXRlbS0taGVpZ2h0MlwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ0hlaWdodCA9IGgyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnSGVpZ2h0ID0gaDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCBhbiBhc3BlY2R0IHJhdGlvXHJcbiAgICAgICAgICAgICAgICAgICAgYXNwZWN0UmF0aW8gPSB3aWR0aCAvIG9yaWdXaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBuZXcgaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gb3JpZ0hlaWdodCAqIGFzcGVjdFJhdGlvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIG5ldyBpbWFnZSBzaXplc1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnaW1nJykuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAgTWF0aC5mbG9vcihoZWlnaHQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIE1hdGguZmxvb3Iod2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdmFyICRpdGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgLy8gICAgIHNpemVzID0gJGl0ZW0uYXR0cignY2xhc3MnKS5zcGxpdCgnICcpOyAvLyBzaXplc1swXSA9PiBpbWFnZSB3aWR0aCwgc2l6ZXNbMV0gPT4gaW1hZ2UgaGVpZ2h0XHJcblxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn0pKGpRdWVyeSk7XHJcbiJdfQ==
