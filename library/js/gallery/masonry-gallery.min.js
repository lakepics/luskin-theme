"use strict";!function(e){function t(t,a,i){var n,r,o,c,l=e("#gallery-container").width();return l>900?n=3:l>600?n=2:l>300&&(n=1),n>1?(r=(l-i*(n-1))/n,o=380-r,c=t-o*a):(o=380-l,1==a?c=t-o*a:2==a&&(c=l/t*t)),Math.floor(c)}function a(){var a,i,n,r=20,o=380,c=780,l=180,s=380;e("#gallery-container").find(".item").each(function(){if(e(this).attr("class"))for(var f,d,h=e(this).attr("class").split(" "),g=0,m=h.length;m>g;++g){switch(h[1]){case"item--width1":a=o,n=t(a,1,r);break;case"item--width2":a=c,n=t(a,2,r);break;default:a=o,n=t(a,1,r)}switch(h[2]){case"item--height1":i=l;break;case"item--height2":i=s;break;default:i=l}f=n/a,d=i*f,e(this).find("img").css({height:Math.floor(d),width:Math.floor(n)})}})}e(document).ready(function(){e("#gallery-filters li").on("click",function(){var t=this.className;e("#gallery-container").isotope({filter:t})})}),e(window).load(function(){e("#gallery-container .item > a").addClass("fancybox").attr("rel","gallery"),e(".fancybox").fancybox({padding:0,margin:[20,60,20,60],closeBtn:!0}),e(".fancybox-media").fancybox({padding:0,margin:[20,60,20,60],closeBtn:!0,openEffect:"none",closeEffect:"none",maxHeight:460,autoSize:!1,helpers:{media:{}}}).removeClass("external").removeAttr("target");var t=e("#gallery-container").imagesLoaded(function(){t.isotope({itemSelector:".item",masonry:{gutter:20}})});e(window).resize(function(){a()}),a()})}(jQuery);
//# sourceMappingURL=data:application/json;base64,
