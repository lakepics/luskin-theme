"use strict";!function(t){function e(e,i,a){var n,r,s,l,o=t("#gallery-container").width();return o>900?n=3:o>600?n=2:o>300&&(n=1),n>1?(r=(o-a*(n-1))/n,s=380-r,l=e-s*i):(s=380-o,1==i?l=e-s*i:2==i&&(l=o/e*e)),Math.floor(l)}function i(){var i,a,n,r=20,s=380,l=780,o=180,c=380;t("#gallery-container").find(".item").each(function(){if(t(this).attr("class"))for(var f,h,d=t(this).attr("class").split(" "),g=0,u=d.length;u>g;++g){switch(d[1]){case"item--width1":i=s,n=e(i,1,r);break;case"item--width2":i=l,n=e(i,2,r);break;default:i=s,n=e(i,1,r)}switch(d[2]){case"item--height1":a=o;break;case"item--height2":a=c;break;default:a=o}f=n/i,h=a*f,t(this).find("img").css({height:Math.floor(h),width:Math.floor(n)})}})}t(document).ready(function(){t("select#gallery-filters").after("<span>"+t("option:selected",this).text()+"</span>"),t("select#gallery-filters").on("change",function(){t(this).siblings("span").remove(),t(this).after("<span>"+t("option:selected",this).text()+"</span>")}),t("#gallery-filters li a").on("click",function(){var e=this.className;t("#gallery-container").isotope({filter:e})})}),t(window).load(function(){t("#gallery-container .item > a").addClass("fancybox").attr("rel","gallery"),t(".fancybox").fancybox({padding:0,margin:[20,60,20,60]});var e=t("#gallery-container").imagesLoaded(function(){e.isotope({itemSelector:".item",masonry:{gutter:20}})});t(window).resize(function(){i()}),i()})}(jQuery);
//# sourceMappingURL=data:application/json;base64,
