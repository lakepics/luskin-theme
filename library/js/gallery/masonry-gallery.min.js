"use strict";!function(t){function e(e,i,a){var n,r,o,c,l=t("#gallery-container").width();return l>900?n=3:l>600?n=2:l>300&&(n=1),n>1?(r=(l-a*(n-1))/n,o=380-r,c=e-o*i):(o=380-l,1==i?c=e-o*i:2==i&&(c=l/e*e)),Math.floor(c)}function i(){var i,a,n,r=20,o=380,c=780,l=180,s=380;t("#gallery-container").find(".item").each(function(){if(t(this).attr("class"))for(var f,h,d=t(this).attr("class").split(" "),g=0,u=d.length;u>g;++g){switch(d[1]){case"item--width1":i=o,n=e(i,1,r);break;case"item--width2":i=c,n=e(i,2,r);break;default:i=o,n=e(i,1,r)}switch(d[2]){case"item--height1":a=l;break;case"item--height2":a=s;break;default:a=l}f=n/i,h=a*f,t(this).find("img").css({height:Math.floor(h),width:Math.floor(n)})}})}t(document).ready(function(){t("#gallery-filters li").on("click",function(){var e=this.className;t("#gallery-container").isotope({filter:e})})}),t(window).load(function(){t("#gallery-container .item > a").addClass("fancybox").attr("rel","gallery"),t(".fancybox").fancybox({padding:0,margin:[20,60,20,60],closeBtn:!0});var e=t("#gallery-container").imagesLoaded(function(){e.isotope({itemSelector:".item",masonry:{gutter:20}})});t(window).resize(function(){i()}),i()})}(jQuery);
//# sourceMappingURL=data:application/json;base64,
