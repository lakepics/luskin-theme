"use strict";!function(t){function e(e,i,a){var n,r,s,l,o=t("#gallery-container").width();return o>900?n=3:o>600?n=2:o>300&&(n=1),n>1?(r=(o-a*(n-1))/n,s=380-r,l=e-s*i):(s=380-o,1==i?l=e-s*i:2==i&&(l=o/e*e)),Math.floor(l)}function i(){var i,a,n,r=20,s=380,l=780,o=180,c=380;t("#gallery-container").find(".item").each(function(){if(t(this).attr("class"))for(var h,f,g=t(this).attr("class").split(" "),d=0,u=g.length;u>d;++d){switch(g[1]){case"item--width1":i=s,n=e(i,1,r);break;case"item--width2":i=l,n=e(i,2,r);break;default:i=s,n=e(i,1,r)}switch(g[2]){case"item--height1":a=o;break;case"item--height2":a=c;break;default:a=h21}h=n/i,f=a*h,t(this).find("img").css({height:Math.floor(f),width:Math.floor(n)})}})}t(document).ready(function(){t("select#gallery-filters").after("<span>"+t("option:selected",this).text()+"</span>"),t("select#gallery-filters").on("change",function(){t(this).siblings("span").remove(),t(this).after("<span>"+t("option:selected",this).text()+"</span>")}),t("select#gallery-filters").on("change",function(){var e=this.value;t("#gallery-container").isotope({filter:e})})}),t(window).load(function(){t("#gallery-container .item > a").addClass("fancybox").attr("rel","gallery"),t(".fancybox").fancybox({padding:0,margin:[20,60,20,60]}),t("#gallery-container").isotope({itemSelector:".item",masonry:{gutter:20}}),t(window).resize(function(){i()}),i()})}(jQuery);
//# sourceMappingURL=data:application/json;base64,
