"use strict";!function(t){function e(e,i,a){var n,o,r,c,l=t("#gallery-container").width();return l>900?n=3:l>600?n=2:l>300&&(n=1),n>1?(o=(l-a*(n-1))/n,r=380-o,c=e-r*i):(r=380-l,1==i?c=e-r*i:2==i&&(c=l/e*e)),Math.floor(c)}function i(){var i,a,n,o=20,r=380,c=780,l=180,s=380;t("#gallery-container").find(".item").each(function(){if(t(this).attr("class"))for(var d,f,h=t(this).attr("class").split(" "),u=0,m=h.length;m>u;++u){switch(h[1]){case"item--width1":i=r,n=e(i,1,o);break;case"item--width2":i=c,n=e(i,2,o);break;default:i=r,n=e(i,1,o)}switch(h[2]){case"item--height1":a=l;break;case"item--height2":a=s;break;default:a=l}d=n/i,f=a*d,t(this).find("img").css({height:Math.floor(f),width:Math.floor(n)})}})}t(document).ready(function(){t("#gallery-filters li").on("click",function(){var e=this.className;t("#gallery-container").isotope({filter:e})})}),t(window).load(function(){t("#gallery-container .item > a").addClass("fancybox").attr("rel","gallery"),t(".fancybox").fancybox({padding:0,margin:[20,60,20,60],closeBtn:!0}),t(".fancybox").click(function(){t.fancybox.showLoading();var e=t('<div id="dummy"></div>').appendTo("body"),i=t(this).clone().appendTo(e);return i.oembed(null,{embedMethod:"replace",afterEmbed:function(i){var a=t(i.code),n="html",o="no";"photo"==i.type?(a=a.find("img:first").attr("src"),n="image"):"rich"===i.type&&(o="auto"),t.fancybox.open({href:a,type:n,scrolling:o,title:i.title||t(this).attr("title"),width:640,height:384,autoSize:!1}),e.remove()},onError:function(){t.fancybox.open(this)}}),!1});var e=t("#gallery-container").imagesLoaded(function(){e.isotope({itemSelector:".item",masonry:{gutter:20}})});t(window).resize(function(){i()}),i()})}(jQuery);
//# sourceMappingURL=data:application/json;base64,
