"use strict";!function(t){var e={swipeTolerance:40},i=function(e,i){this.target=t(e),this.touch=i,this.startX=this.currentX=i.screenX,this.startY=this.currentY=i.screenY,this.eventType=null};i.options={},i.latestTap=null,i.prototype.move=function(t){this.currentX=t.screenX,this.currentY=t.screenY},i.prototype.process=function(){var t=this.currentX-this.startX,e=this.currentY-this.startY;0==t&&0==e?this.checkForDoubleTap():Math.abs(e)>i.options.swipeTolerance&&Math.abs(e)>Math.abs(t)?(this.eventType=e>0?"swipedown":"swipeup",this.target.trigger("swipe",[this])):Math.abs(t)>i.options.swipeTolerance&&(this.eventType=t>0?"swiperight":"swipeleft",this.target.trigger("swipe",[this])),this.eventType&&this.target.trigger(this.eventType,[this]),this.target.trigger("touch",[this])},i.prototype.checkForDoubleTap=function(){i.latestTap&&new Date-i.latestTap<400&&(this.eventType="doubletap"),this.eventType||(this.eventType="tap"),i.latestTap=new Date};var n=function(n,o){i.options=t.extend(e,o),n.bind("touchstart",this.touchStart),n.bind("touchmove",this.touchMove),n.bind("touchcancel",this.touchCancel),n.bind("touchend",this.touchEnd)};n.prototype.touchStart=function(t){var e=this;n.eachTouch(t,function(t){n.touches[t.identifier]=new i(e,t)})},n.prototype.touchMove=function(t){n.eachTouch(t,function(t){var e=n.touches[t.identifier];e&&e.move(t)})},n.prototype.touchCancel=function(t){n.eachTouch(t,function(t){n.purge(t,!0)})},n.prototype.touchEnd=function(t){n.eachTouch(t,function(t){n.purge(t)})},n.touches={},n.purge=function(t,e){if(!e){var i=n.touches[t.identifier];i&&i.process()}delete n.touches[t.identifier]},n.eachTouch=function(t,e){for(var t=t.originalEvent,i=t.changedTouches.length,n=0;n<i;n++)e(t.changedTouches[n])},t.fn.addSwipeEvents=function(t,e){return!e&&jQuery.isFunction(t)&&(e=t,t=null),new n(this,t),e&&this.bind("touch",e),this}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnJhcnkvanMvbGlicy9qcXVlcnkuZG91YmxldGFwLmpzIl0sIm5hbWVzIjpbIiQiLCJkZWZhdWx0cyIsInN3aXBlVG9sZXJhbmNlIiwidG91Y2hTdGF0dXMiLCJ0YXJnZXQiLCJ0b3VjaCIsInRoaXMiLCJzdGFydFgiLCJjdXJyZW50WCIsInNjcmVlblgiLCJzdGFydFkiLCJjdXJyZW50WSIsInNjcmVlblkiLCJldmVudFR5cGUiLCJvcHRpb25zIiwibGF0ZXN0VGFwIiwicHJvdG90eXBlIiwibW92ZSIsInByb2Nlc3MiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNoZWNrRm9yRG91YmxlVGFwIiwiTWF0aCIsImFicyIsInRyaWdnZXIiLCJEYXRlIiwic3dpcGVFdmVudHMiLCJlbGVtZW50cyIsImV4dGVuZCIsImJpbmQiLCJ0b3VjaFN0YXJ0IiwidG91Y2hNb3ZlIiwidG91Y2hDYW5jZWwiLCJ0b3VjaEVuZCIsImV2dCIsImVhY2hUb3VjaCIsInRvdWNoZXMiLCJpZGVudGlmaWVyIiwibG9jIiwicHVyZ2UiLCJjYW5jZWxsZWQiLCJjYWxsYmFjayIsIm9yaWdpbmFsRXZlbnQiLCJudW0iLCJjaGFuZ2VkVG91Y2hlcyIsImxlbmd0aCIsImkiLCJmbiIsImFkZFN3aXBlRXZlbnRzIiwialF1ZXJ5IiwiaXNGdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsY0E2QkEsU0FBV0EsR0FFUCxHQUFJQyxJQUNBQyxlQUFrQixJQUdsQkMsRUFBYyxTQUFxQkMsRUFBUUMsR0FDM0NDLEtBQUtGLE9BQVNKLEVBQUVJLEdBQ2hCRSxLQUFLRCxNQUFRQSxFQUNiQyxLQUFLQyxPQUFTRCxLQUFLRSxTQUFXSCxFQUFNSSxRQUNwQ0gsS0FBS0ksT0FBU0osS0FBS0ssU0FBV04sRUFBTU8sUUFDcENOLEtBQUtPLFVBQVksS0FFckJWLEdBQVlXLFdBQ1pYLEVBQVlZLFVBQVksS0FFeEJaLEVBQVlhLFVBQVVDLEtBQU8sU0FBVVosR0FDbkNDLEtBQUtFLFNBQVdILEVBQU1JLFFBQ3RCSCxLQUFLSyxTQUFXTixFQUFNTyxTQUcxQlQsRUFBWWEsVUFBVUUsUUFBVSxXQUM1QixHQUFJQyxHQUFVYixLQUFLRSxTQUFXRixLQUFLQyxPQUMvQmEsRUFBVWQsS0FBS0ssU0FBV0wsS0FBS0ksTUFDcEIsSUFBWFMsR0FBMkIsR0FBWEMsRUFDaEJkLEtBQUtlLG9CQUNFQyxLQUFLQyxJQUFJSCxHQUFXakIsRUFBWVcsUUFBUVosZ0JBQWtCb0IsS0FBS0MsSUFBSUgsR0FBV0UsS0FBS0MsSUFBSUosSUFDOUZiLEtBQUtPLFVBQVlPLEVBQVUsRUFBSSxZQUFjLFVBQzdDZCxLQUFLRixPQUFPb0IsUUFBUSxTQUFVbEIsUUFDdkJnQixLQUFLQyxJQUFJSixHQUFXaEIsRUFBWVcsUUFBUVosaUJBQy9DSSxLQUFLTyxVQUFZTSxFQUFVLEVBQUksYUFBZSxZQUM5Q2IsS0FBS0YsT0FBT29CLFFBQVEsU0FBVWxCLFFBRTlCQSxLQUFLTyxXQUFXUCxLQUFLRixPQUFPb0IsUUFBUWxCLEtBQUtPLFdBQVlQLE9BQ3pEQSxLQUFLRixPQUFPb0IsUUFBUSxTQUFVbEIsUUFHbENILEVBQVlhLFVBQVVLLGtCQUFvQixXQUNsQ2xCLEVBQVlZLFdBQ1IsR0FBSVUsTUFBU3RCLEVBQVlZLFVBQVksTUFBS1QsS0FBS08sVUFBWSxhQUU5RFAsS0FBS08sWUFBV1AsS0FBS08sVUFBWSxPQUN0Q1YsRUFBWVksVUFBWSxHQUFJVSxNQUdoQyxJQUFJQyxHQUFjLFNBQXFCQyxFQUFVYixHQUM3Q1gsRUFBWVcsUUFBVWQsRUFBRTRCLE9BQU8zQixFQUFVYSxHQUN6Q2EsRUFBU0UsS0FBSyxhQUFjdkIsS0FBS3dCLFlBQ2pDSCxFQUFTRSxLQUFLLFlBQWF2QixLQUFLeUIsV0FDaENKLEVBQVNFLEtBQUssY0FBZXZCLEtBQUswQixhQUNsQ0wsRUFBU0UsS0FBSyxXQUFZdkIsS0FBSzJCLFVBR25DUCxHQUFZVixVQUFVYyxXQUFhLFNBQVVJLEdBQ3pDLEdBQUk5QixHQUFTRSxJQUNib0IsR0FBWVMsVUFBVUQsRUFBSyxTQUFVN0IsR0FDakNxQixFQUFZVSxRQUFRL0IsRUFBTWdDLFlBQWMsR0FBSWxDLEdBQVlDLEVBQVFDLE1BSXhFcUIsRUFBWVYsVUFBVWUsVUFBWSxTQUFVRyxHQUN4Q1IsRUFBWVMsVUFBVUQsRUFBSyxTQUFVN0IsR0FDakMsR0FBSWlDLEdBQU1aLEVBQVlVLFFBQVEvQixFQUFNZ0MsV0FDaENDLElBQUtBLEVBQUlyQixLQUFLWixNQUkxQnFCLEVBQVlWLFVBQVVnQixZQUFjLFNBQVVFLEdBQzFDUixFQUFZUyxVQUFVRCxFQUFLLFNBQVU3QixHQUNqQ3FCLEVBQVlhLE1BQU1sQyxHQUFPLE1BSWpDcUIsRUFBWVYsVUFBVWlCLFNBQVcsU0FBVUMsR0FDdkNSLEVBQVlTLFVBQVVELEVBQUssU0FBVTdCLEdBQ2pDcUIsRUFBWWEsTUFBTWxDLE1BSTFCcUIsRUFBWVUsV0FDWlYsRUFBWWEsTUFBUSxTQUFVbEMsRUFBT21DLEdBQ2pDLElBQUtBLEVBQVcsQ0FDWixHQUFJRixHQUFNWixFQUFZVSxRQUFRL0IsRUFBTWdDLFdBQ2hDQyxJQUFLQSxFQUFJcEIsZ0JBRVZRLEdBQVlVLFFBQVEvQixFQUFNZ0MsYUFHckNYLEVBQVlTLFVBQVksU0FBVUQsRUFBS08sR0FHbkMsSUFBSyxHQUZEUCxHQUFNQSxFQUFJUSxjQUNWQyxFQUFNVCxFQUFJVSxlQUFlQyxPQUNwQkMsRUFBSSxFQUFHQSxFQUFJSCxFQUFLRyxJQUNyQkwsRUFBU1AsRUFBSVUsZUFBZUUsS0FhcEM5QyxFQUFFK0MsR0FBR0MsZUFBaUIsU0FBVWxDLEVBQVMyQixHQU9yQyxPQU5LQSxHQUFZUSxPQUFPQyxXQUFXcEMsS0FDL0IyQixFQUFXM0IsRUFDWEEsRUFBVSxNQUVkLEdBQUlZLEdBQVlwQixLQUFNUSxHQUNsQjJCLEdBQVVuQyxLQUFLdUIsS0FBSyxRQUFTWSxHQUMxQm5DLE9BRVoyQyIsImZpbGUiOiJsaWJyYXJ5L2pzL2xpYnMvanF1ZXJ5LmRvdWJsZXRhcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcblxyXG5UaGlzIHBsdWdpbiBhZGRzIGN1c3RvbSB0b3VjaC1zY3JlZW4gZXZlbnRzIHRvIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnRzLiBUaGlzXHJcbnNob3VsZCBvbmx5IHdvcmsgb24gaVBhZHMsIGlQaG9uZXMsIGFuZCBpUG9kIFRvdWNoZXMuIEFueXRoaW5nIGVsc2UgaXMgYm9udXMuXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTAtKiByaWNrIG9sc29uXHJcblxyXG5odHRwczovL2dpdGh1Yi5jb20vdGVjaG5vd2VlbmllL2pxdWVyeS5kb3VibGV0YXBcclxuXHJcblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xyXG5hIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcclxuXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXHJcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcclxuZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXHJcbnBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xyXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcblxyXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxyXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXHJcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxyXG5NRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxyXG5OT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFXHJcbkxJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cclxuT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXHJcbldJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4qL1xyXG5cclxuKGZ1bmN0aW9uICgkKSB7XHJcblxyXG4gICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgICdzd2lwZVRvbGVyYW5jZSc6IDQwXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciB0b3VjaFN0YXR1cyA9IGZ1bmN0aW9uIHRvdWNoU3RhdHVzKHRhcmdldCwgdG91Y2gpIHtcclxuICAgICAgICB0aGlzLnRhcmdldCA9ICQodGFyZ2V0KTtcclxuICAgICAgICB0aGlzLnRvdWNoID0gdG91Y2g7XHJcbiAgICAgICAgdGhpcy5zdGFydFggPSB0aGlzLmN1cnJlbnRYID0gdG91Y2guc2NyZWVuWDtcclxuICAgICAgICB0aGlzLnN0YXJ0WSA9IHRoaXMuY3VycmVudFkgPSB0b3VjaC5zY3JlZW5ZO1xyXG4gICAgICAgIHRoaXMuZXZlbnRUeXBlID0gbnVsbDtcclxuICAgIH07XHJcbiAgICB0b3VjaFN0YXR1cy5vcHRpb25zID0ge307XHJcbiAgICB0b3VjaFN0YXR1cy5sYXRlc3RUYXAgPSBudWxsO1xyXG5cclxuICAgIHRvdWNoU3RhdHVzLnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24gKHRvdWNoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50WCA9IHRvdWNoLnNjcmVlblg7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50WSA9IHRvdWNoLnNjcmVlblk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRvdWNoU3RhdHVzLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvZmZzZXRYID0gdGhpcy5jdXJyZW50WCAtIHRoaXMuc3RhcnRYO1xyXG4gICAgICAgIHZhciBvZmZzZXRZID0gdGhpcy5jdXJyZW50WSAtIHRoaXMuc3RhcnRZO1xyXG4gICAgICAgIGlmIChvZmZzZXRYID09IDAgJiYgb2Zmc2V0WSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tGb3JEb3VibGVUYXAoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKG9mZnNldFkpID4gdG91Y2hTdGF0dXMub3B0aW9ucy5zd2lwZVRvbGVyYW5jZSAmJiBNYXRoLmFicyhvZmZzZXRZKSA+IE1hdGguYWJzKG9mZnNldFgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRUeXBlID0gb2Zmc2V0WSA+IDAgPyAnc3dpcGVkb3duJyA6ICdzd2lwZXVwJztcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQudHJpZ2dlcignc3dpcGUnLCBbdGhpc10pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMob2Zmc2V0WCkgPiB0b3VjaFN0YXR1cy5vcHRpb25zLnN3aXBlVG9sZXJhbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRUeXBlID0gb2Zmc2V0WCA+IDAgPyAnc3dpcGVyaWdodCcgOiAnc3dpcGVsZWZ0JztcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQudHJpZ2dlcignc3dpcGUnLCBbdGhpc10pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5ldmVudFR5cGUpIHRoaXMudGFyZ2V0LnRyaWdnZXIodGhpcy5ldmVudFR5cGUsIFt0aGlzXSk7XHJcbiAgICAgICAgdGhpcy50YXJnZXQudHJpZ2dlcigndG91Y2gnLCBbdGhpc10pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0b3VjaFN0YXR1cy5wcm90b3R5cGUuY2hlY2tGb3JEb3VibGVUYXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRvdWNoU3RhdHVzLmxhdGVzdFRhcCkge1xyXG4gICAgICAgICAgICBpZiAobmV3IERhdGUoKSAtIHRvdWNoU3RhdHVzLmxhdGVzdFRhcCA8IDQwMCkgdGhpcy5ldmVudFR5cGUgPSAnZG91YmxldGFwJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50VHlwZSkgdGhpcy5ldmVudFR5cGUgPSAndGFwJztcclxuICAgICAgICB0b3VjaFN0YXR1cy5sYXRlc3RUYXAgPSBuZXcgRGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc3dpcGVFdmVudHMgPSBmdW5jdGlvbiBzd2lwZUV2ZW50cyhlbGVtZW50cywgb3B0aW9ucykge1xyXG4gICAgICAgIHRvdWNoU3RhdHVzLm9wdGlvbnMgPSAkLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XHJcbiAgICAgICAgZWxlbWVudHMuYmluZCgndG91Y2hzdGFydCcsIHRoaXMudG91Y2hTdGFydCk7XHJcbiAgICAgICAgZWxlbWVudHMuYmluZCgndG91Y2htb3ZlJywgdGhpcy50b3VjaE1vdmUpO1xyXG4gICAgICAgIGVsZW1lbnRzLmJpbmQoJ3RvdWNoY2FuY2VsJywgdGhpcy50b3VjaENhbmNlbCk7XHJcbiAgICAgICAgZWxlbWVudHMuYmluZCgndG91Y2hlbmQnLCB0aGlzLnRvdWNoRW5kKTtcclxuICAgIH07XHJcblxyXG4gICAgc3dpcGVFdmVudHMucHJvdG90eXBlLnRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XHJcbiAgICAgICAgc3dpcGVFdmVudHMuZWFjaFRvdWNoKGV2dCwgZnVuY3Rpb24gKHRvdWNoKSB7XHJcbiAgICAgICAgICAgIHN3aXBlRXZlbnRzLnRvdWNoZXNbdG91Y2guaWRlbnRpZmllcl0gPSBuZXcgdG91Y2hTdGF0dXModGFyZ2V0LCB0b3VjaCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN3aXBlRXZlbnRzLnByb3RvdHlwZS50b3VjaE1vdmUgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgc3dpcGVFdmVudHMuZWFjaFRvdWNoKGV2dCwgZnVuY3Rpb24gKHRvdWNoKSB7XHJcbiAgICAgICAgICAgIHZhciBsb2MgPSBzd2lwZUV2ZW50cy50b3VjaGVzW3RvdWNoLmlkZW50aWZpZXJdO1xyXG4gICAgICAgICAgICBpZiAobG9jKSBsb2MubW92ZSh0b3VjaCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN3aXBlRXZlbnRzLnByb3RvdHlwZS50b3VjaENhbmNlbCA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICBzd2lwZUV2ZW50cy5lYWNoVG91Y2goZXZ0LCBmdW5jdGlvbiAodG91Y2gpIHtcclxuICAgICAgICAgICAgc3dpcGVFdmVudHMucHVyZ2UodG91Y2gsIHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBzd2lwZUV2ZW50cy5wcm90b3R5cGUudG91Y2hFbmQgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgc3dpcGVFdmVudHMuZWFjaFRvdWNoKGV2dCwgZnVuY3Rpb24gKHRvdWNoKSB7XHJcbiAgICAgICAgICAgIHN3aXBlRXZlbnRzLnB1cmdlKHRvdWNoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3dpcGVFdmVudHMudG91Y2hlcyA9IHt9O1xyXG4gICAgc3dpcGVFdmVudHMucHVyZ2UgPSBmdW5jdGlvbiAodG91Y2gsIGNhbmNlbGxlZCkge1xyXG4gICAgICAgIGlmICghY2FuY2VsbGVkKSB7XHJcbiAgICAgICAgICAgIHZhciBsb2MgPSBzd2lwZUV2ZW50cy50b3VjaGVzW3RvdWNoLmlkZW50aWZpZXJdO1xyXG4gICAgICAgICAgICBpZiAobG9jKSBsb2MucHJvY2VzcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxldGUgc3dpcGVFdmVudHMudG91Y2hlc1t0b3VjaC5pZGVudGlmaWVyXTtcclxuICAgIH07XHJcblxyXG4gICAgc3dpcGVFdmVudHMuZWFjaFRvdWNoID0gZnVuY3Rpb24gKGV2dCwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgZXZ0ID0gZXZ0Lm9yaWdpbmFsRXZlbnQ7XHJcbiAgICAgICAgdmFyIG51bSA9IGV2dC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhldnQuY2hhbmdlZFRvdWNoZXNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gYWRkcyBjdXN0b20gZXZlbnRzOlxyXG4gICAgLy8gICB0b3VjaCAgICAgIC8vIGFsbCBldmVudHNcclxuICAgIC8vICAgc3dpcGUgICAgICAvLyBvbmx5IHN3aXBlKiBldmVudHNcclxuICAgIC8vICAgc3dpcGVsZWZ0XHJcbiAgICAvLyAgIHN3aXBlcmlnaHRcclxuICAgIC8vICAgc3dpcGV1cFxyXG4gICAgLy8gICBzd2lwZWRvd25cclxuICAgIC8vICAgdGFwXHJcbiAgICAvLyAgIGRvdWJsZXRhcFxyXG4gICAgJC5mbi5hZGRTd2lwZUV2ZW50cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICghY2FsbGJhY2sgJiYgalF1ZXJ5LmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xyXG4gICAgICAgICAgICBvcHRpb25zID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3IHN3aXBlRXZlbnRzKHRoaXMsIG9wdGlvbnMpO1xyXG4gICAgICAgIGlmIChjYWxsYmFjaykgdGhpcy5iaW5kKCd0b3VjaCcsIGNhbGxiYWNrKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbn0pKGpRdWVyeSk7Il19
