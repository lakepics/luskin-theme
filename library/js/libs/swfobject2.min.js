"use strict";var swfobject=function(){function e(){if(!H){try{var e=x.getElementsByTagName("body")[0].appendChild(h("span"));e.parentNode.removeChild(e)}catch(t){return}H=!0;for(var n=P.length,a=0;n>a;a++)P[a]()}}function t(e){H?e():P[P.length]=e}function n(e){if(_typeof($.addEventListener)!=_)$.addEventListener("load",e,!1);else if(_typeof(x.addEventListener)!=_)x.addEventListener("load",e,!1);else if(_typeof($.attachEvent)!=_)m($,"onload",e);else if("function"==typeof $.onload){var t=$.onload;$.onload=function(){t(),e()}}else $.onload=e}function a(){V?i():r()}function i(){var e=x.getElementsByTagName("body")[0],t=h(L);t.setAttribute("type",B);var n=e.appendChild(t);if(n){var a=0;!function(){if(_typeof(n.GetVariable)!=_){var i=n.GetVariable("$version");i&&(i=i.split(" ")[1].split(","),J.pv=[parseInt(i[0],10),parseInt(i[1],10),parseInt(i[2],10)])}else if(10>a)return a++,void setTimeout(arguments.callee,10);e.removeChild(t),n=null,r()}()}else r()}function r(){var e=R.length;if(e>0)for(var t=0;e>t;t++){var n=R[t].id,a=R[t].callbackFn,i={success:!1,id:n};if(J.pv[0]>0){var r=y(n);if(r)if(!w(R[t].swfVersion)||J.wk&&J.wk<312)if(R[t].expressInstall&&l()){var f={};f.data=R[t].expressInstall,f.width=r.getAttribute("width")||"0",f.height=r.getAttribute("height")||"0",r.getAttribute("class")&&(f.styleclass=r.getAttribute("class")),r.getAttribute("align")&&(f.align=r.getAttribute("align"));for(var c={},u=r.getElementsByTagName("param"),p=u.length,v=0;p>v;v++)"movie"!=u[v].getAttribute("name").toLowerCase()&&(c[u[v].getAttribute("name")]=u[v].getAttribute("value"));s(f,c,n,a)}else d(r),a&&a(i);else b(n,!0),a&&(i.success=!0,i.ref=o(n),a(i))}else if(b(n,!0),a){var h=o(n);h&&_typeof(h.SetVariable)!=_&&(i.success=!0,i.ref=h),a(i)}}}function o(e){var t=null,n=y(e);if(n&&"OBJECT"==n.nodeName)if(_typeof(n.SetVariable)!=_)t=n;else{var a=n.getElementsByTagName(L)[0];a&&(t=a)}return t}function l(){return!U&&w("6.0.65")&&(J.win||J.mac)&&!(J.wk&&J.wk<312)}function s(e,t,n,a){U=!0,A=a||null,I={success:!1,id:n};var i=y(n);if(i){"OBJECT"==i.nodeName?(E=f(i),S=null):(E=i,S=n),e.id=O,(_typeof(e.width)==_||!/%$/.test(e.width)&&parseInt(e.width,10)<310)&&(e.width="310"),(_typeof(e.height)==_||!/%$/.test(e.height)&&parseInt(e.height,10)<137)&&(e.height="137"),x.title=x.title.slice(0,47)+" - Flash Player Installation";var r=J.ie&&J.win?"ActiveX":"PlugIn",o="MMredirectURL="+$.location.toString().replace(/&/g,"%26")+"&MMplayerType="+r+"&MMdoctitle="+x.title;if(_typeof(t.flashvars)!=_?t.flashvars+="&"+o:t.flashvars=o,J.ie&&J.win&&4!=i.readyState){var l=h("div");n+="SWFObjectNew",l.setAttribute("id",n),i.parentNode.insertBefore(l,i),i.style.display="none",function(){4==i.readyState?i.parentNode.removeChild(i):setTimeout(arguments.callee,10)}()}c(e,t,n)}}function d(e){if(J.ie&&J.win&&4!=e.readyState){var t=h("div");e.parentNode.insertBefore(t,e),t.parentNode.replaceChild(f(e),t),e.style.display="none",function(){4==e.readyState?e.parentNode.removeChild(e):setTimeout(arguments.callee,10)}()}else e.parentNode.replaceChild(f(e),e)}function f(e){var t=h("div");if(J.win&&J.ie)t.innerHTML=e.innerHTML;else{var n=e.getElementsByTagName(L)[0];if(n){var a=n.childNodes;if(a)for(var i=a.length,r=0;i>r;r++)1==a[r].nodeType&&"PARAM"==a[r].nodeName||8==a[r].nodeType||t.appendChild(a[r].cloneNode(!0))}}return t}function c(e,t,n){var a,i=y(n);if(J.wk&&J.wk<312)return a;if(i)if(_typeof(e.id)==_&&(e.id=n),J.ie&&J.win){var r="";for(var o in e)e[o]!=Object.prototype[o]&&("data"==o.toLowerCase()?t.movie=e[o]:"styleclass"==o.toLowerCase()?r+=' class="'+e[o]+'"':"classid"!=o.toLowerCase()&&(r+=" "+o+'="'+e[o]+'"'));var l="";for(var s in t)t[s]!=Object.prototype[s]&&(l+='<param name="'+s+'" value="'+t[s]+'" />');i.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+r+">"+l+"</object>",D[D.length]=e.id,a=y(e.id)}else{var d=h(L);d.setAttribute("type",B);for(var f in e)e[f]!=Object.prototype[f]&&("styleclass"==f.toLowerCase()?d.setAttribute("class",e[f]):"classid"!=f.toLowerCase()&&d.setAttribute(f,e[f]));for(var c in t)t[c]!=Object.prototype[c]&&"movie"!=c.toLowerCase()&&u(d,c,t[c]);i.parentNode.replaceChild(d,i),a=d}return a}function u(e,t,n){var a=h("param");a.setAttribute("name",t),a.setAttribute("value",n),e.appendChild(a)}function p(e){var t=y(e);t&&"OBJECT"==t.nodeName&&(J.ie&&J.win?(t.style.display="none",function(){4==t.readyState?v(e):setTimeout(arguments.callee,10)}()):t.parentNode.removeChild(t))}function v(e){var t=y(e);if(t){for(var n in t)"function"==typeof t[n]&&(t[n]=null);t.parentNode.removeChild(t)}}function y(e){var t=null;try{t=x.getElementById(e)}catch(n){}return t}function h(e){return x.createElement(e)}function m(e,t,n){e.attachEvent(t,n),W[W.length]=[e,t,n]}function w(e){var t=J.pv,n=e.split(".");return n[0]=parseInt(n[0],10),n[1]=parseInt(n[1],10)||0,n[2]=parseInt(n[2],10)||0,t[0]>n[0]||t[0]==n[0]&&t[1]>n[1]||t[0]==n[0]&&t[1]==n[1]&&t[2]>=n[2]}function g(e,t,n,a){if(!J.ie||!J.mac){var i=x.getElementsByTagName("head")[0];if(i){var r=n&&"string"==typeof n?n:"screen";if(a&&(N=null,T=null),!N||T!=r){var o=h("style");o.setAttribute("type","text/css"),o.setAttribute("media",r),N=i.appendChild(o),J.ie&&J.win&&_typeof(x.styleSheets)!=_&&x.styleSheets.length>0&&(N=x.styleSheets[x.styleSheets.length-1]),T=r}J.ie&&J.win?N&&_typeof(N.addRule)==L&&N.addRule(e,t):N&&_typeof(x.createTextNode)!=_&&N.appendChild(x.createTextNode(e+" {"+t+"}"))}}}function b(e,t){if(G){var n=t?"visible":"hidden";H&&y(e)?y(e).style.visibility=n:g("#"+e,"visibility:"+n)}}function C(e){var t=/[\\\"<>\.;]/,n=null!=t.exec(e);return n&&("undefined"==typeof encodeURIComponent?"undefined":_typeof(encodeURIComponent))!=_?encodeURIComponent(e):e}var E,S,A,I,N,T,_="undefined",L="object",k="Shockwave Flash",j="ShockwaveFlash.ShockwaveFlash",B="application/x-shockwave-flash",O="SWFObjectExprInst",F="onreadystatechange",$=window,x=document,M=navigator,V=!1,P=[a],R=[],D=[],W=[],H=!1,U=!1,G=!0,J=function(){var e=_typeof(x.getElementById)!=_&&_typeof(x.getElementsByTagName)!=_&&_typeof(x.createElement)!=_,t=M.userAgent.toLowerCase(),n=M.platform.toLowerCase(),a=n?/win/.test(n):/win/.test(t),i=n?/mac/.test(n):/mac/.test(t),r=/webkit/.test(t)?parseFloat(t.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):!1,o=!1,l=[0,0,0],s=null;if(_typeof(M.plugins)!=_&&_typeof(M.plugins[k])==L)s=M.plugins[k].description,!s||_typeof(M.mimeTypes)!=_&&M.mimeTypes[B]&&!M.mimeTypes[B].enabledPlugin||(V=!0,o=!1,s=s.replace(/^.*\s+(\S+\s+\S+$)/,"$1"),l[0]=parseInt(s.replace(/^(.*)\..*$/,"$1"),10),l[1]=parseInt(s.replace(/^.*\.(.*)\s.*$/,"$1"),10),l[2]=/[a-zA-Z]/.test(s)?parseInt(s.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0);else if(_typeof($.ActiveXObject)!=_)try{var d=new ActiveXObject(j);d&&(s=d.GetVariable("$version"),s&&(o=!0,s=s.split(" ")[1].split(","),l=[parseInt(s[0],10),parseInt(s[1],10),parseInt(s[2],10)]))}catch(f){}return{w3:e,pv:l,wk:r,ie:o,win:a,mac:i}}();(function(){J.w3&&((_typeof(x.readyState)!=_&&"complete"==x.readyState||_typeof(x.readyState)==_&&(x.getElementsByTagName("body")[0]||x.body))&&e(),H||(_typeof(x.addEventListener)!=_&&x.addEventListener("DOMContentLoaded",e,!1),J.ie&&J.win&&(x.attachEvent(F,function(){"complete"==x.readyState&&(x.detachEvent(F,arguments.callee),e())}),$==top&&!function(){if(!H){try{x.documentElement.doScroll("left")}catch(t){return void setTimeout(arguments.callee,0)}e()}}()),J.wk&&!function(){return H?void 0:/loaded|complete/.test(x.readyState)?void e():void setTimeout(arguments.callee,0)}(),n(e)))})(),function(){J.ie&&J.win&&window.attachEvent("onunload",function(){for(var e=W.length,t=0;e>t;t++)W[t][0].detachEvent(W[t][1],W[t][2]);for(var n=D.length,a=0;n>a;a++)p(D[a]);for(var i in J)J[i]=null;J=null;for(var r in swfobject)swfobject[r]=null;swfobject=null})}();return{registerObject:function(e,t,n,a){if(J.w3&&e&&t){var i={};i.id=e,i.swfVersion=t,i.expressInstall=n,i.callbackFn=a,R[R.length]=i,b(e,!1)}else a&&a({success:!1,id:e})},getObjectById:function(e){return J.w3?o(e):void 0},embedSWF:function(e,n,a,i,r,o,d,f,u,p){var v={success:!1,id:n};J.w3&&!(J.wk&&J.wk<312)&&e&&n&&a&&i&&r?(b(n,!1),t(function(){a+="",i+="";var t={};if(u&&("undefined"==typeof u?"undefined":_typeof(u))===L)for(var y in u)t[y]=u[y];t.data=e,t.width=a,t.height=i;var h={};if(f&&("undefined"==typeof f?"undefined":_typeof(f))===L)for(var m in f)h[m]=f[m];if(d&&("undefined"==typeof d?"undefined":_typeof(d))===L)for(var g in d)_typeof(h.flashvars)!=_?h.flashvars+="&"+g+"="+d[g]:h.flashvars=g+"="+d[g];if(w(r)){var C=c(t,h,n);t.id==n&&b(n,!0),v.success=!0,v.ref=C}else{if(o&&l())return t.data=o,void s(t,h,n,p);b(n,!0)}p&&p(v)})):p&&p(v)},switchOffAutoHideShow:function(){G=!1},ua:J,getFlashPlayerVersion:function(){return{major:J.pv[0],minor:J.pv[1],release:J.pv[2]}},hasFlashPlayerVersion:w,createSWF:function(e,t,n){return J.w3?c(e,t,n):void 0},showExpressInstall:function(e,t,n,a){J.w3&&l()&&s(e,t,n,a)},removeSWF:function(e){J.w3&&p(e)},createCSS:function(e,t,n,a){J.w3&&g(e,t,n,a)},addDomLoadEvent:t,addLoadEvent:n,getQueryParamValue:function(e){var t=x.location.search||x.location.hash;if(t){if(/\?/.test(t)&&(t=t.split("?")[1]),null==e)return C(t);for(var n=t.split("&"),a=0;a<n.length;a++)if(n[a].substring(0,n[a].indexOf("="))==e)return C(n[a].substring(n[a].indexOf("=")+1))}return""},expressInstallCallback:function(){if(U){var e=y(O);e&&E&&(e.parentNode.replaceChild(E,e),S&&(b(S,!0),J.ie&&J.win&&(E.style.display="block")),A&&A(I)),U=!1}}}}();
//# sourceMappingURL=data:application/json;base64,
