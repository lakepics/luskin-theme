"use strict";!function(r,n){function t(r,n,t){var e=c[n.type]||{},a=n.empty||t;return a&&null==r?null:n.def&&null==r?n.def:(r=e.floor?~~r:parseFloat(r),null==r||isNaN(r)?n.def:e.mod?(r%=e.mod,r<0?e.mod+r:r):e.min>r?e.min:e.max<r?e.max:r)}function e(n){var t=l(),e=t._rgba=[];return n=n.toLowerCase(),h(f,function(r,a){var o,i=a.re.exec(n),s=i&&a.parse(i),f=a.space||"rgba",l=u[f].cache;if(s)return o=t[f](s),t[l]=o[l],e=t._rgba=o._rgba,!1}),0!==e.length?(0===Math.max.apply(Math,e)&&r.extend(e,o.transparent),t):(n=o[n])?n:void 0}function a(r,n,t){return t=(t+1)%1,6*t<1?r+6*(n-r)*t:2*t<1?n:3*t<2?r+(n-r)*(2/3-t)*6:r}var o,i="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color outlineColor".split(" "),s=/^([\-+])=\s*(\d+\.?\d*)/,f=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(r){return[r[1],r[2],r[3],r[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(r){return[2.55*r[1],2.55*r[2],2.55*r[3],r[4]]}},{re:/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,parse:function(r){return[parseInt(r[1],16),parseInt(r[2],16),parseInt(r[3],16)]}},{re:/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,parse:function(r){return[parseInt(r[1]+r[1],16),parseInt(r[2]+r[2],16),parseInt(r[3]+r[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(r){return[r[1],r[2]/100,r[3]/100,r[4]]}}],l=r.Color=function(n,t,e,a){return new r.Color.fn.parse(n,t,e,a)},u={rgba:{cache:"_rgba",props:{red:{idx:0,type:"byte",empty:!0},green:{idx:1,type:"byte",empty:!0},blue:{idx:2,type:"byte",empty:!0},alpha:{idx:3,type:"percent",def:1}}},hsla:{cache:"_hsla",props:{hue:{idx:0,type:"degrees",empty:!0},saturation:{idx:1,type:"percent",empty:!0},lightness:{idx:2,type:"percent",empty:!0}}}},c={"byte":{floor:!0,min:0,max:255},percent:{min:0,max:1},degrees:{mod:360,floor:!0}},d=u.rgba.props,p=l.support={},h=r.each;u.hsla.props.alpha=d.alpha,l.fn=l.prototype={constructor:l,parse:function(a,i,s,f){if(a===n)return this._rgba=[null,null,null,null],this;(a instanceof r||a.nodeType)&&(a=a instanceof r?a.css(i):r(a).css(i),i=n);var c=this,p=r.type(a),g=this._rgba=[];return i!==n&&(a=[a,i,s,f],p="array"),"string"===p?this.parse(e(a)||o._default):"array"===p?(h(d,function(r,n){g[n.idx]=t(a[n.idx],n)}),this):"object"===p?(a instanceof l?h(u,function(r,n){a[n.cache]&&(c[n.cache]=a[n.cache].slice())}):h(u,function(r,n){h(n.props,function(r,e){var o=n.cache;if(!c[o]&&n.to){if(null==a[r]||"alpha"===r)return;c[o]=n.to(c._rgba)}c[o][e.idx]=t(a[r],e,!0)})}),this):void 0},is:function g(r){var g=l(r),n=!0,t=this;return h(u,function(r,e){var a,o=g[e.cache];return o&&(a=t[e.cache]||e.to&&e.to(t._rgba)||[],h(e.props,function(r,t){if(null!=o[t.idx])return n=o[t.idx]==a[t.idx]})),n}),n},_space:function(){var r=[],n=this;return h(u,function(t,e){n[e.cache]&&r.push(t)}),r.pop()},transition:function(r,n){var e=l(r),a=e._space(),o=u[a],i=this[o.cache]||o.to(this._rgba),s=i.slice();return e=e[o.cache],h(o.props,function(r,a){var o=a.idx,f=i[o],l=e[o],u=c[a.type]||{};null!==l&&(null===f?s[o]=l:(u.mod&&(l-f>u.mod/2?f+=u.mod:f-l>u.mod/2&&(f-=u.mod)),s[a.idx]=t((l-f)*n+f,a)))}),this[a](s)},blend:function b(n){if(1===this._rgba[3])return this;var t=this._rgba.slice(),e=t.pop(),b=l(n)._rgba;return l(r.map(t,function(r,n){return(1-e)*b[n]+e*r}))},toRgbaString:function(){var n="rgba(",t=r.map(this._rgba,function(r,n){return null==r?n>2?1:0:r});return 1===t[3]&&(t.pop(),n="rgb("),n+t.join(",")+")"},toHslaString:function(){var n="hsla(",t=r.map(this.hsla(),function(r,n){return null==r&&(r=n>2?1:0),n&&n<3&&(r=Math.round(100*r)+"%"),r});return 1==t[3]&&(t.pop(),n="hsl("),n+t.join(",")+")"},toHexString:function(n){var t=this._rgba.slice(),e=t.pop();return n&&t.push(~~(255*e)),"#"+r.map(t,function(r,n){return r=(r||0).toString(16),1==r.length?"0"+r:r}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}},l.fn.parse.prototype=l.fn,u.hsla.to=function(r){if(null==r[0]||null==r[1]||null==r[2])return[null,null,null,r[3]];var n,t,e=r[0]/255,a=r[1]/255,o=r[2]/255,i=r[3],s=Math.max(e,a,o),f=Math.min(e,a,o),l=s-f,u=s+f,c=.5*u;return n=f===s?0:e===s?60*(a-o)/l+360:a===s?60*(o-e)/l+120:60*(e-a)/l+240,t=0===c||1===c?c:c<=.5?l/u:l/(2-u),[Math.round(n)%360,t,c,null==i?1:i]},u.hsla.from=function(r){if(null==r[0]||null==r[1]||null==r[2])return[null,null,null,r[3]];var n=r[0]/360,t=r[1],e=r[2],o=r[3],i=e<=.5?e*(1+t):e+t-e*t,s=2*e-i;return[Math.round(255*a(s,i,n+1/3)),Math.round(255*a(s,i,n)),Math.round(255*a(s,i,n-1/3)),o]},h(u,function(e,a){var o=a.props,i=a.cache,f=a.to,u=a.from;l.fn[e]=function(e){if(f&&!this[i]&&(this[i]=f(this._rgba)),e===n)return this[i].slice();var a,s=r.type(e),c="array"===s||"object"===s?e:arguments,d=this[i].slice();return h(o,function(r,n){var e=c["object"===s?r:n.idx];null==e&&(e=d[n.idx]),d[n.idx]=t(e,n)}),u?(a=l(u(d)),a[i]=d,a):l(d)},h(o,function(n,t){l.fn[n]||(l.fn[n]=function(a){var o,i=r.type(a),f="alpha"===n?this._hsla?"hsla":"rgba":e,l=this[f](),u=l[t.idx];return"undefined"===i?u:("function"===i&&(a=a.call(this,u),i=r.type(a)),null==a&&t.empty?this:("string"===i&&(o=s.exec(a),o&&(a=u+parseFloat(o[2])*("+"===o[1]?1:-1))),l[t.idx]=a,this[f](l)))})})}),h(i,function(n,t){r.cssHooks[t]={set:function(n,a){var o;if("string"!==r.type(a)||(o=e(a))){if(a=l(o||a),!p.rgba&&1!==a._rgba[3]){var i,s="backgroundColor"===t?n.parentNode:n;do i=r.curCSS(s,"backgroundColor");while((""===i||"transparent"===i)&&(s=s.parentNode)&&s.style);a=a.blend(i&&"transparent"!==i?i:"_default")}a=a.toRgbaString()}n.style[t]=a}},r.fx.step[t]=function(n){n.colorInit||(n.start=l(n.elem,t),n.end=l(n.end),n.colorInit=!0),r.cssHooks[t].set(n.elem,n.start.transition(n.end,n.pos))}}),r(function(){var r=document.createElement("div"),n=r.style;n.cssText="background-color:rgba(1,1,1,.5)",p.rgba=n.backgroundColor.indexOf("rgba")>-1}),o=r.Color.names={aqua:"#00ffff",azure:"#f0ffff",beige:"#f5f5dc",black:"#000000",blue:"#0000ff",brown:"#a52a2a",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkviolet:"#9400d3",fuchsia:"#ff00ff",gold:"#ffd700",green:"#008000",indigo:"#4b0082",khaki:"#f0e68c",lightblue:"#add8e6",lightcyan:"#e0ffff",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightyellow:"#ffffe0",lime:"#00ff00",magenta:"#ff00ff",maroon:"#800000",navy:"#000080",olive:"#808000",orange:"#ffa500",pink:"#ffc0cb",purple:"#800080",violet:"#800080",red:"#ff0000",silver:"#c0c0c0",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
