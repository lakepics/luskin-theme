"use strict";!function(r,n){function t(r,n,t){var e=c[n.type]||{},a=n.empty||t;return a&&null==r?null:n.def&&null==r?n.def:(r=e.floor?~~r:parseFloat(r),null==r||isNaN(r)?n.def:e.mod?(r%=e.mod,r<0?e.mod+r:r):e.min>r?e.min:e.max<r?e.max:r)}function e(n){var t=l(),e=t._rgba=[];return n=n.toLowerCase(),h(f,function(r,a){var o,i=a.re.exec(n),s=i&&a.parse(i),f=a.space||"rgba",l=u[f].cache;if(s)return o=t[f](s),t[l]=o[l],e=t._rgba=o._rgba,!1}),0!==e.length?(0===Math.max.apply(Math,e)&&r.extend(e,o.transparent),t):(n=o[n])?n:void 0}function a(r,n,t){return t=(t+1)%1,6*t<1?r+6*(n-r)*t:2*t<1?n:3*t<2?r+(n-r)*(2/3-t)*6:r}var o,i="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color outlineColor".split(" "),s=/^([\-+])=\s*(\d+\.?\d*)/,f=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(r){return[r[1],r[2],r[3],r[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(r){return[2.55*r[1],2.55*r[2],2.55*r[3],r[4]]}},{re:/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,parse:function(r){return[parseInt(r[1],16),parseInt(r[2],16),parseInt(r[3],16)]}},{re:/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,parse:function(r){return[parseInt(r[1]+r[1],16),parseInt(r[2]+r[2],16),parseInt(r[3]+r[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(r){return[r[1],r[2]/100,r[3]/100,r[4]]}}],l=r.Color=function(n,t,e,a){return new r.Color.fn.parse(n,t,e,a)},u={rgba:{cache:"_rgba",props:{red:{idx:0,type:"byte",empty:!0},green:{idx:1,type:"byte",empty:!0},blue:{idx:2,type:"byte",empty:!0},alpha:{idx:3,type:"percent",def:1}}},hsla:{cache:"_hsla",props:{hue:{idx:0,type:"degrees",empty:!0},saturation:{idx:1,type:"percent",empty:!0},lightness:{idx:2,type:"percent",empty:!0}}}},c={"byte":{floor:!0,min:0,max:255},percent:{min:0,max:1},degrees:{mod:360,floor:!0}},d=u.rgba.props,p=l.support={},h=r.each;u.hsla.props.alpha=d.alpha,l.fn=l.prototype={constructor:l,parse:function(a,i,s,f){if(a===n)return this._rgba=[null,null,null,null],this;(a instanceof r||a.nodeType)&&(a=a instanceof r?a.css(i):r(a).css(i),i=n);var c=this,p=r.type(a),g=this._rgba=[];return i!==n&&(a=[a,i,s,f],p="array"),"string"===p?this.parse(e(a)||o._default):"array"===p?(h(d,function(r,n){g[n.idx]=t(a[n.idx],n)}),this):"object"===p?(a instanceof l?h(u,function(r,n){a[n.cache]&&(c[n.cache]=a[n.cache].slice())}):h(u,function(r,n){h(n.props,function(r,e){var o=n.cache;if(!c[o]&&n.to){if(null==a[r]||"alpha"===r)return;c[o]=n.to(c._rgba)}c[o][e.idx]=t(a[r],e,!0)})}),this):void 0},is:function g(r){var g=l(r),n=!0,t=this;return h(u,function(r,e){var a,o=g[e.cache];return o&&(a=t[e.cache]||e.to&&e.to(t._rgba)||[],h(e.props,function(r,t){if(null!=o[t.idx])return n=o[t.idx]==a[t.idx]})),n}),n},_space:function(){var r=[],n=this;return h(u,function(t,e){n[e.cache]&&r.push(t)}),r.pop()},transition:function(r,n){var e=l(r),a=e._space(),o=u[a],i=this[o.cache]||o.to(this._rgba),s=i.slice();return e=e[o.cache],h(o.props,function(r,a){var o=a.idx,f=i[o],l=e[o],u=c[a.type]||{};null!==l&&(null===f?s[o]=l:(u.mod&&(l-f>u.mod/2?f+=u.mod:f-l>u.mod/2&&(f-=u.mod)),s[a.idx]=t((l-f)*n+f,a)))}),this[a](s)},blend:function b(n){if(1===this._rgba[3])return this;var t=this._rgba.slice(),e=t.pop(),b=l(n)._rgba;return l(r.map(t,function(r,n){return(1-e)*b[n]+e*r}))},toRgbaString:function(){var n="rgba(",t=r.map(this._rgba,function(r,n){return null==r?n>2?1:0:r});return 1===t[3]&&(t.pop(),n="rgb("),n+t.join(",")+")"},toHslaString:function(){var n="hsla(",t=r.map(this.hsla(),function(r,n){return null==r&&(r=n>2?1:0),n&&n<3&&(r=Math.round(100*r)+"%"),r});return 1==t[3]&&(t.pop(),n="hsl("),n+t.join(",")+")"},toHexString:function(n){var t=this._rgba.slice(),e=t.pop();return n&&t.push(~~(255*e)),"#"+r.map(t,function(r,n){return r=(r||0).toString(16),1==r.length?"0"+r:r}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}},l.fn.parse.prototype=l.fn,u.hsla.to=function(r){if(null==r[0]||null==r[1]||null==r[2])return[null,null,null,r[3]];var n,t,e=r[0]/255,a=r[1]/255,o=r[2]/255,i=r[3],s=Math.max(e,a,o),f=Math.min(e,a,o),l=s-f,u=s+f,c=.5*u;return n=f===s?0:e===s?60*(a-o)/l+360:a===s?60*(o-e)/l+120:60*(e-a)/l+240,t=0===c||1===c?c:c<=.5?l/u:l/(2-u),[Math.round(n)%360,t,c,null==i?1:i]},u.hsla.from=function(r){if(null==r[0]||null==r[1]||null==r[2])return[null,null,null,r[3]];var n=r[0]/360,t=r[1],e=r[2],o=r[3],i=e<=.5?e*(1+t):e+t-e*t,s=2*e-i;return[Math.round(255*a(s,i,n+1/3)),Math.round(255*a(s,i,n)),Math.round(255*a(s,i,n-1/3)),o]},h(u,function(e,a){var o=a.props,i=a.cache,f=a.to,u=a.from;l.fn[e]=function(e){if(f&&!this[i]&&(this[i]=f(this._rgba)),e===n)return this[i].slice();var a,s=r.type(e),c="array"===s||"object"===s?e:arguments,d=this[i].slice();return h(o,function(r,n){var e=c["object"===s?r:n.idx];null==e&&(e=d[n.idx]),d[n.idx]=t(e,n)}),u?(a=l(u(d)),a[i]=d,a):l(d)},h(o,function(n,t){l.fn[n]||(l.fn[n]=function(a){var o,i=r.type(a),f="alpha"===n?this._hsla?"hsla":"rgba":e,l=this[f](),u=l[t.idx];return"undefined"===i?u:("function"===i&&(a=a.call(this,u),i=r.type(a)),null==a&&t.empty?this:("string"===i&&(o=s.exec(a),o&&(a=u+parseFloat(o[2])*("+"===o[1]?1:-1))),l[t.idx]=a,this[f](l)))})})}),h(i,function(n,t){r.cssHooks[t]={set:function(n,a){var o;if("string"!==r.type(a)||(o=e(a))){if(a=l(o||a),!p.rgba&&1!==a._rgba[3]){var i,s="backgroundColor"===t?n.parentNode:n;do i=r.curCSS(s,"backgroundColor");while((""===i||"transparent"===i)&&(s=s.parentNode)&&s.style);a=a.blend(i&&"transparent"!==i?i:"_default")}a=a.toRgbaString()}n.style[t]=a}},r.fx.step[t]=function(n){n.colorInit||(n.start=l(n.elem,t),n.end=l(n.end),n.colorInit=!0),r.cssHooks[t].set(n.elem,n.start.transition(n.end,n.pos))}}),r(function(){var r=document.createElement("div"),n=r.style;n.cssText="background-color:rgba(1,1,1,.5)",p.rgba=n.backgroundColor.indexOf("rgba")>-1}),o=r.Color.names={aqua:"#00ffff",azure:"#f0ffff",beige:"#f5f5dc",black:"#000000",blue:"#0000ff",brown:"#a52a2a",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkviolet:"#9400d3",fuchsia:"#ff00ff",gold:"#ffd700",green:"#008000",indigo:"#4b0082",khaki:"#f0e68c",lightblue:"#add8e6",lightcyan:"#e0ffff",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightyellow:"#ffffe0",lime:"#00ff00",magenta:"#ff00ff",maroon:"#800000",navy:"#000080",olive:"#808000",orange:"#ffa500",pink:"#ffc0cb",purple:"#800080",violet:"#800080",red:"#ff0000",silver:"#c0c0c0",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnJhcnkvanMvbGlicy9qcXVlcnkuY29sb3IuanMiXSwibmFtZXMiOlsialF1ZXJ5IiwidW5kZWZpbmVkIiwiY2xhbXAiLCJ2YWx1ZSIsInByb3AiLCJhbHdheXNBbGxvd0VtcHR5IiwidHlwZSIsInByb3BUeXBlcyIsImFsbG93RW1wdHkiLCJlbXB0eSIsImRlZiIsImZsb29yIiwicGFyc2VGbG9hdCIsImlzTmFOIiwibW9kIiwibWluIiwibWF4Iiwic3RyaW5nUGFyc2UiLCJzdHJpbmciLCJpbnN0IiwiY29sb3IiLCJyZ2JhIiwiX3JnYmEiLCJ0b0xvd2VyQ2FzZSIsImVhY2giLCJzdHJpbmdQYXJzZXJzIiwiaSIsInBhcnNlciIsInBhcnNlZCIsIm1hdGNoIiwicmUiLCJleGVjIiwidmFsdWVzIiwicGFyc2UiLCJzcGFjZU5hbWUiLCJzcGFjZSIsImNhY2hlIiwic3BhY2VzIiwibGVuZ3RoIiwiTWF0aCIsImFwcGx5IiwiZXh0ZW5kIiwiY29sb3JzIiwidHJhbnNwYXJlbnQiLCJodWUycmdiIiwicCIsInEiLCJoIiwic3RlcEhvb2tzIiwic3BsaXQiLCJycGx1c2VxdWFscyIsImV4ZWNSZXN1bHQiLCJwYXJzZUludCIsIkNvbG9yIiwiZ3JlZW4iLCJibHVlIiwiYWxwaGEiLCJmbiIsInByb3BzIiwicmVkIiwiaWR4IiwiaHNsYSIsImh1ZSIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJieXRlIiwicGVyY2VudCIsImRlZ3JlZXMiLCJyZ2Jhc3BhY2UiLCJzdXBwb3J0IiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwibm9kZVR5cGUiLCJjc3MiLCJfZGVmYXVsdCIsImtleSIsInNsaWNlIiwidG8iLCJpcyIsImNvbXBhcmUiLCJzYW1lIiwibXlzZWxmIiwiXyIsImxvY2FsQ2FjaGUiLCJpc0NhY2hlIiwiX3NwYWNlIiwidXNlZCIsInB1c2giLCJwb3AiLCJ0cmFuc2l0aW9uIiwib3RoZXIiLCJkaXN0YW5jZSIsImVuZCIsInN0YXJ0IiwicmVzdWx0IiwiaW5kZXgiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJibGVuZCIsIm9wYXF1ZSIsInJnYiIsImEiLCJtYXAiLCJ2IiwidG9SZ2JhU3RyaW5nIiwicHJlZml4Iiwiam9pbiIsInRvSHNsYVN0cmluZyIsInJvdW5kIiwidG9IZXhTdHJpbmciLCJpbmNsdWRlQWxwaGEiLCJ0b1N0cmluZyIsInMiLCJyIiwiZyIsImIiLCJkaWZmIiwiYWRkIiwibCIsImZyb20iLCJyZXQiLCJhcnIiLCJhcmd1bWVudHMiLCJsb2NhbCIsInZhbCIsInZ0eXBlIiwiX2hzbGEiLCJjdXIiLCJjYWxsIiwiaG9vayIsImNzc0hvb2tzIiwic2V0IiwiZWxlbSIsImJhY2tncm91bmRDb2xvciIsImN1ckVsZW0iLCJwYXJlbnROb2RlIiwiY3VyQ1NTIiwic3R5bGUiLCJmeCIsInN0ZXAiLCJjb2xvckluaXQiLCJwb3MiLCJkaXYiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkaXZfc3R5bGUiLCJjc3NUZXh0IiwiaW5kZXhPZiIsIm5hbWVzIiwiYXF1YSIsImF6dXJlIiwiYmVpZ2UiLCJibGFjayIsImJyb3duIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ3JleSIsImRhcmtncmVlbiIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3Zpb2xldCIsImZ1Y2hzaWEiLCJnb2xkIiwiaW5kaWdvIiwia2hha2kiLCJsaWdodGJsdWUiLCJsaWdodGN5YW4iLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibWFnZW50YSIsIm1hcm9vbiIsIm5hdnkiLCJvbGl2ZSIsIm9yYW5nZSIsInBpbmsiLCJwdXJwbGUiLCJ2aW9sZXQiLCJzaWx2ZXIiLCJ3aGl0ZSIsInllbGxvdyJdLCJtYXBwaW5ncyI6IkFBQUEsY0Fh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YnJhcnkvanMvbGlicy9qcXVlcnkuY29sb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qXHJcbiAqIGpRdWVyeSBDb2xvciBBbmltYXRpb25zIHZAVkVSU0lPTlxyXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9cclxuICpcclxuICogQ29weXJpZ2h0IDIwMTEgSm9obiBSZXNpZ1xyXG4gKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgb3IgR1BMIFZlcnNpb24gMiBsaWNlbnNlcy5cclxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxyXG4gKlxyXG4gKiBEYXRlOiBAREFURVxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoalF1ZXJ5LCB1bmRlZmluZWQpIHtcclxuICAgIHZhciBzdGVwSG9va3MgPSBcImJhY2tncm91bmRDb2xvciBib3JkZXJCb3R0b21Db2xvciBib3JkZXJMZWZ0Q29sb3IgYm9yZGVyUmlnaHRDb2xvciBib3JkZXJUb3BDb2xvciBjb2xvciBvdXRsaW5lQ29sb3JcIi5zcGxpdChcIiBcIiksXHJcblxyXG5cclxuICAgIC8vIHBsdXNlcXVhbHMgdGVzdCBmb3IgKz0gMTAwIC09IDEwMFxyXG4gICAgcnBsdXNlcXVhbHMgPSAvXihbXFwtK10pPVxccyooXFxkK1xcLj9cXGQqKS8sXHJcblxyXG5cclxuICAgIC8vIGEgc2V0IG9mIFJFJ3MgdGhhdCBjYW4gbWF0Y2ggc3RyaW5ncyBhbmQgZ2VuZXJhdGUgY29sb3IgdHVwbGVzLlxyXG4gICAgc3RyaW5nUGFyc2VycyA9IFt7XHJcbiAgICAgICAgcmU6IC9yZ2JhP1xcKFxccyooXFxkezEsM30pXFxzKixcXHMqKFxcZHsxLDN9KVxccyosXFxzKihcXGR7MSwzfSlcXHMqKD86LFxccyooXFxkKyg/OlxcLlxcZCspPylcXHMqKT9cXCkvLFxyXG4gICAgICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShleGVjUmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbZXhlY1Jlc3VsdFsxXSwgZXhlY1Jlc3VsdFsyXSwgZXhlY1Jlc3VsdFszXSwgZXhlY1Jlc3VsdFs0XV07XHJcbiAgICAgICAgfVxyXG4gICAgfSwge1xyXG4gICAgICAgIHJlOiAvcmdiYT9cXChcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKig/OixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFxzKik/XFwpLyxcclxuICAgICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UoZXhlY1Jlc3VsdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gWzIuNTUgKiBleGVjUmVzdWx0WzFdLCAyLjU1ICogZXhlY1Jlc3VsdFsyXSwgMi41NSAqIGV4ZWNSZXN1bHRbM10sIGV4ZWNSZXN1bHRbNF1dO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHtcclxuICAgICAgICByZTogLyMoW2EtZkEtRjAtOV17Mn0pKFthLWZBLUYwLTldezJ9KShbYS1mQS1GMC05XXsyfSkvLFxyXG4gICAgICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShleGVjUmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbcGFyc2VJbnQoZXhlY1Jlc3VsdFsxXSwgMTYpLCBwYXJzZUludChleGVjUmVzdWx0WzJdLCAxNiksIHBhcnNlSW50KGV4ZWNSZXN1bHRbM10sIDE2KV07XHJcbiAgICAgICAgfVxyXG4gICAgfSwge1xyXG4gICAgICAgIHJlOiAvIyhbYS1mQS1GMC05XSkoW2EtZkEtRjAtOV0pKFthLWZBLUYwLTldKS8sXHJcbiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKGV4ZWNSZXN1bHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtwYXJzZUludChleGVjUmVzdWx0WzFdICsgZXhlY1Jlc3VsdFsxXSwgMTYpLCBwYXJzZUludChleGVjUmVzdWx0WzJdICsgZXhlY1Jlc3VsdFsyXSwgMTYpLCBwYXJzZUludChleGVjUmVzdWx0WzNdICsgZXhlY1Jlc3VsdFszXSwgMTYpXTtcclxuICAgICAgICB9XHJcbiAgICB9LCB7XHJcbiAgICAgICAgcmU6IC9oc2xhP1xcKFxccyooXFxkKyg/OlxcLlxcZCspPylcXHMqLFxccyooXFxkKyg/OlxcLlxcZCspPylcXCVcXHMqLFxccyooXFxkKyg/OlxcLlxcZCspPylcXCVcXHMqKD86LFxccyooXFxkKyg/OlxcLlxcZCspPylcXHMqKT9cXCkvLFxyXG4gICAgICAgIHNwYWNlOiBcImhzbGFcIixcclxuICAgICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UoZXhlY1Jlc3VsdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW2V4ZWNSZXN1bHRbMV0sIGV4ZWNSZXN1bHRbMl0gLyAxMDAsIGV4ZWNSZXN1bHRbM10gLyAxMDAsIGV4ZWNSZXN1bHRbNF1dO1xyXG4gICAgICAgIH1cclxuICAgIH1dLFxyXG5cclxuXHJcbiAgICAvLyBqUXVlcnkuQ29sb3IoIClcclxuICAgIGNvbG9yID0galF1ZXJ5LkNvbG9yID0gZnVuY3Rpb24gKGNvbG9yLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcclxuICAgICAgICByZXR1cm4gbmV3IGpRdWVyeS5Db2xvci5mbi5wYXJzZShjb2xvciwgZ3JlZW4sIGJsdWUsIGFscGhhKTtcclxuICAgIH0sXHJcbiAgICAgICAgc3BhY2VzID0ge1xyXG4gICAgICAgIHJnYmE6IHtcclxuICAgICAgICAgICAgY2FjaGU6IFwiX3JnYmFcIixcclxuICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIHJlZDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkeDogMCxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVcIixcclxuICAgICAgICAgICAgICAgICAgICBlbXB0eTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdyZWVuOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWR4OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtcHR5OiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYmx1ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkeDogMixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVcIixcclxuICAgICAgICAgICAgICAgICAgICBlbXB0eTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFscGhhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWR4OiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGVyY2VudFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZjogMVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoc2xhOiB7XHJcbiAgICAgICAgICAgIGNhY2hlOiBcIl9oc2xhXCIsXHJcbiAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICBodWU6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZHg6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkZWdyZWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZW1wdHk6IHRydWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzYXR1cmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWR4OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGVyY2VudFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtcHR5OiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGlnaHRuZXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWR4OiAyLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGVyY2VudFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtcHR5OiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgICAgIHByb3BUeXBlcyA9IHtcclxuICAgICAgICBcImJ5dGVcIjoge1xyXG4gICAgICAgICAgICBmbG9vcjogdHJ1ZSxcclxuICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICBtYXg6IDI1NVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJwZXJjZW50XCI6IHtcclxuICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICBtYXg6IDFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZGVncmVlc1wiOiB7XHJcbiAgICAgICAgICAgIG1vZDogMzYwLFxyXG4gICAgICAgICAgICBmbG9vcjogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAgICAgcmdiYXNwYWNlID0gc3BhY2VzLnJnYmEucHJvcHMsXHJcbiAgICAgICAgc3VwcG9ydCA9IGNvbG9yLnN1cHBvcnQgPSB7fSxcclxuXHJcblxyXG4gICAgLy8gY29sb3JzID0galF1ZXJ5LkNvbG9yLm5hbWVzXHJcbiAgICBjb2xvcnMsXHJcblxyXG5cclxuICAgIC8vIGxvY2FsIGFsaWFzZXMgb2YgZnVuY3Rpb25zIGNhbGxlZCBvZnRlblxyXG4gICAgZWFjaCA9IGpRdWVyeS5lYWNoO1xyXG5cclxuICAgIHNwYWNlcy5oc2xhLnByb3BzLmFscGhhID0gcmdiYXNwYWNlLmFscGhhO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBwcm9wLCBhbHdheXNBbGxvd0VtcHR5KSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBwcm9wVHlwZXNbcHJvcC50eXBlXSB8fCB7fSxcclxuICAgICAgICAgICAgYWxsb3dFbXB0eSA9IHByb3AuZW1wdHkgfHwgYWx3YXlzQWxsb3dFbXB0eTtcclxuXHJcbiAgICAgICAgaWYgKGFsbG93RW1wdHkgJiYgdmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByb3AuZGVmICYmIHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByb3AuZGVmO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZS5mbG9vcikge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IH4gfnZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvcC5kZWY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlLm1vZCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICUgdHlwZS5tb2Q7XHJcbiAgICAgICAgICAgIC8vIC0xMCAtPiAzNTBcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlIDwgMCA/IHR5cGUubW9kICsgdmFsdWUgOiB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZvciBub3cgYWxsIHByb3BlcnR5IHR5cGVzIHdpdGhvdXQgbW9kIGhhdmUgbWluIGFuZCBtYXhcclxuICAgICAgICByZXR1cm4gdHlwZS5taW4gPiB2YWx1ZSA/IHR5cGUubWluIDogdHlwZS5tYXggPCB2YWx1ZSA/IHR5cGUubWF4IDogdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3RyaW5nUGFyc2Uoc3RyaW5nKSB7XHJcbiAgICAgICAgdmFyIGluc3QgPSBjb2xvcigpLFxyXG4gICAgICAgICAgICByZ2JhID0gaW5zdC5fcmdiYSA9IFtdO1xyXG5cclxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgZWFjaChzdHJpbmdQYXJzZXJzLCBmdW5jdGlvbiAoaSwgcGFyc2VyKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IHBhcnNlci5yZS5leGVjKHN0cmluZyksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBtYXRjaCAmJiBwYXJzZXIucGFyc2UobWF0Y2gpLFxyXG4gICAgICAgICAgICAgICAgcGFyc2VkLFxyXG4gICAgICAgICAgICAgICAgc3BhY2VOYW1lID0gcGFyc2VyLnNwYWNlIHx8IFwicmdiYVwiLFxyXG4gICAgICAgICAgICAgICAgY2FjaGUgPSBzcGFjZXNbc3BhY2VOYW1lXS5jYWNoZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgIHBhcnNlZCA9IGluc3Rbc3BhY2VOYW1lXSh2YWx1ZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgd2FzIGFuIHJnYmEgcGFyc2UgdGhlIGFzc2lnbm1lbnQgbWlnaHQgaGFwcGVuIHR3aWNlXHJcbiAgICAgICAgICAgICAgICAvLyBvaCB3ZWxsLi4uLlxyXG4gICAgICAgICAgICAgICAgaW5zdFtjYWNoZV0gPSBwYXJzZWRbY2FjaGVdO1xyXG4gICAgICAgICAgICAgICAgcmdiYSA9IGluc3QuX3JnYmEgPSBwYXJzZWQuX3JnYmE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZXhpdCBlYWNoKCBzdHJpbmdQYXJzZXJzICkgaGVyZSBiZWNhdXNlIHdlIG1hdGNoZWRcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBGb3VuZCBhIHN0cmluZ1BhcnNlciB0aGF0IGhhbmRsZWQgaXRcclxuICAgICAgICBpZiAocmdiYS5sZW5ndGggIT09IDApIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgY2FtZSBmcm9tIGEgcGFyc2VkIHN0cmluZywgZm9yY2UgXCJ0cmFuc3BhcmVudFwiIHdoZW4gYWxwaGEgaXMgMFxyXG4gICAgICAgICAgICAvLyBjaHJvbWUsIChhbmQgbWF5YmUgb3RoZXJzKSByZXR1cm4gXCJ0cmFuc3BhcmVudFwiIGFzIHJnYmEoMCwwLDAsMClcclxuICAgICAgICAgICAgaWYgKE1hdGgubWF4LmFwcGx5KE1hdGgsIHJnYmEpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKHJnYmEsIGNvbG9ycy50cmFuc3BhcmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGluc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBuYW1lZCBjb2xvcnMgLyBkZWZhdWx0IC0gZmlsdGVyIGJhY2sgdGhyb3VnaCBwYXJzZSBmdW5jdGlvblxyXG4gICAgICAgIGlmIChzdHJpbmcgPSBjb2xvcnNbc3RyaW5nXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb2xvci5mbiA9IGNvbG9yLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBjb25zdHJ1Y3RvcjogY29sb3IsXHJcbiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhKSB7XHJcbiAgICAgICAgICAgIGlmIChyZWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmdiYSA9IFtudWxsLCBudWxsLCBudWxsLCBudWxsXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZWQgaW5zdGFuY2VvZiBqUXVlcnkgfHwgcmVkLm5vZGVUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZWQgPSByZWQgaW5zdGFuY2VvZiBqUXVlcnkgPyByZWQuY3NzKGdyZWVuKSA6IGpRdWVyeShyZWQpLmNzcyhncmVlbik7XHJcbiAgICAgICAgICAgICAgICBncmVlbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGluc3QgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgdHlwZSA9IGpRdWVyeS50eXBlKHJlZCksXHJcbiAgICAgICAgICAgICAgICByZ2JhID0gdGhpcy5fcmdiYSA9IFtdLFxyXG4gICAgICAgICAgICAgICAgc291cmNlO1xyXG5cclxuICAgICAgICAgICAgLy8gbW9yZSB0aGFuIDEgYXJndW1lbnQgc3BlY2lmaWVkIC0gYXNzdW1lICggcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEgKVxyXG4gICAgICAgICAgICBpZiAoZ3JlZW4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmVkID0gW3JlZCwgZ3JlZW4sIGJsdWUsIGFscGhhXTtcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBcImFycmF5XCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZShzdHJpbmdQYXJzZShyZWQpIHx8IGNvbG9ycy5fZGVmYXVsdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcImFycmF5XCIpIHtcclxuICAgICAgICAgICAgICAgIGVhY2gocmdiYXNwYWNlLCBmdW5jdGlvbiAoa2V5LCBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmdiYVtwcm9wLmlkeF0gPSBjbGFtcChyZWRbcHJvcC5pZHhdLCBwcm9wKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVkIGluc3RhbmNlb2YgY29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBlYWNoKHNwYWNlcywgZnVuY3Rpb24gKHNwYWNlTmFtZSwgc3BhY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZFtzcGFjZS5jYWNoZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3Rbc3BhY2UuY2FjaGVdID0gcmVkW3NwYWNlLmNhY2hlXS5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVhY2goc3BhY2VzLCBmdW5jdGlvbiAoc3BhY2VOYW1lLCBzcGFjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlYWNoKHNwYWNlLnByb3BzLCBmdW5jdGlvbiAoa2V5LCBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FjaGUgPSBzcGFjZS5jYWNoZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgY2FjaGUgZG9lc24ndCBleGlzdCwgYW5kIHdlIGtub3cgaG93IHRvIGNvbnZlcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5zdFtjYWNoZV0gJiYgc3BhY2UudG8pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHZhbHVlIHdhcyBudWxsLCB3ZSBkb24ndCBuZWVkIHRvIGNvcHkgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUga2V5IHdhcyBhbHBoYSwgd2UgZG9uJ3QgbmVlZCB0byBjb3B5IGl0IGVpdGhlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWRba2V5XSA9PSBudWxsIHx8IGtleSA9PT0gXCJhbHBoYVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdFtjYWNoZV0gPSBzcGFjZS50byhpbnN0Ll9yZ2JhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBvbmx5IGNhc2Ugd2hlcmUgd2UgYWxsb3cgbnVsbHMgZm9yIEFMTCBwcm9wZXJ0aWVzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCBjbGFtcCB3aXRoIGFsd2F5c0FsbG93RW1wdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RbY2FjaGVdW3Byb3AuaWR4XSA9IGNsYW1wKHJlZFtrZXldLCBwcm9wLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXM6IGZ1bmN0aW9uIGlzKGNvbXBhcmUpIHtcclxuICAgICAgICAgICAgdmFyIGlzID0gY29sb3IoY29tcGFyZSksXHJcbiAgICAgICAgICAgICAgICBzYW1lID0gdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG15c2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBlYWNoKHNwYWNlcywgZnVuY3Rpb24gKF8sIHNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNDYWNoZSA9IGlzW3NwYWNlLmNhY2hlXSxcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbENhY2hlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzQ2FjaGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbENhY2hlID0gbXlzZWxmW3NwYWNlLmNhY2hlXSB8fCBzcGFjZS50byAmJiBzcGFjZS50byhteXNlbGYuX3JnYmEpIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGVhY2goc3BhY2UucHJvcHMsIGZ1bmN0aW9uIChfLCBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0NhY2hlW3Byb3AuaWR4XSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lID0gaXNDYWNoZVtwcm9wLmlkeF0gPT0gbG9jYWxDYWNoZVtwcm9wLmlkeF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2FtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNhbWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gc2FtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9zcGFjZTogZnVuY3Rpb24gX3NwYWNlKCkge1xyXG4gICAgICAgICAgICB2YXIgdXNlZCA9IFtdLFxyXG4gICAgICAgICAgICAgICAgaW5zdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGVhY2goc3BhY2VzLCBmdW5jdGlvbiAoc3BhY2VOYW1lLCBzcGFjZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3Rbc3BhY2UuY2FjaGVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlZC5wdXNoKHNwYWNlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdXNlZC5wb3AoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRyYW5zaXRpb246IGZ1bmN0aW9uIHRyYW5zaXRpb24ob3RoZXIsIGRpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHZhciBlbmQgPSBjb2xvcihvdGhlciksXHJcbiAgICAgICAgICAgICAgICBzcGFjZU5hbWUgPSBlbmQuX3NwYWNlKCksXHJcbiAgICAgICAgICAgICAgICBzcGFjZSA9IHNwYWNlc1tzcGFjZU5hbWVdLFxyXG4gICAgICAgICAgICAgICAgc3RhcnQgPSB0aGlzW3NwYWNlLmNhY2hlXSB8fCBzcGFjZS50byh0aGlzLl9yZ2JhKSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN0YXJ0LnNsaWNlKCk7XHJcblxyXG4gICAgICAgICAgICBlbmQgPSBlbmRbc3BhY2UuY2FjaGVdO1xyXG4gICAgICAgICAgICBlYWNoKHNwYWNlLnByb3BzLCBmdW5jdGlvbiAoa2V5LCBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBwcm9wLmlkeCxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFZhbHVlID0gc3RhcnRbaW5kZXhdLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZFZhbHVlID0gZW5kW2luZGV4XSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gcHJvcFR5cGVzW3Byb3AudHlwZV0gfHwge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgbnVsbCwgZG9uJ3Qgb3ZlcnJpZGUgc3RhcnQgdmFsdWVcclxuICAgICAgICAgICAgICAgIGlmIChlbmRWYWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGlmIG51bGwgLSB1c2UgZW5kXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRWYWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBlbmRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUubW9kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmRWYWx1ZSAtIHN0YXJ0VmFsdWUgPiB0eXBlLm1vZCAvIDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWUgKz0gdHlwZS5tb2Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnRWYWx1ZSAtIGVuZFZhbHVlID4gdHlwZS5tb2QgLyAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFZhbHVlIC09IHR5cGUubW9kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtwcm9wLmlkeF0gPSBjbGFtcCgoZW5kVmFsdWUgLSBzdGFydFZhbHVlKSAqIGRpc3RhbmNlICsgc3RhcnRWYWx1ZSwgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1tzcGFjZU5hbWVdKHJlc3VsdCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBibGVuZDogZnVuY3Rpb24gYmxlbmQob3BhcXVlKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIHdlIGFyZSBhbHJlYWR5IG9wYXF1ZSAtIHJldHVybiBvdXJzZWxmXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZ2JhWzNdID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHJnYiA9IHRoaXMuX3JnYmEuc2xpY2UoKSxcclxuICAgICAgICAgICAgICAgIGEgPSByZ2IucG9wKCksXHJcbiAgICAgICAgICAgICAgICBibGVuZCA9IGNvbG9yKG9wYXF1ZSkuX3JnYmE7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29sb3IoalF1ZXJ5Lm1hcChyZ2IsIGZ1bmN0aW9uICh2LCBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKDEgLSBhKSAqIGJsZW5kW2ldICsgYSAqIHY7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvUmdiYVN0cmluZzogZnVuY3Rpb24gdG9SZ2JhU3RyaW5nKCkge1xyXG4gICAgICAgICAgICB2YXIgcHJlZml4ID0gXCJyZ2JhKFwiLFxyXG4gICAgICAgICAgICAgICAgcmdiYSA9IGpRdWVyeS5tYXAodGhpcy5fcmdiYSwgZnVuY3Rpb24gKHYsIGkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2ID09IG51bGwgPyBpID4gMiA/IDEgOiAwIDogdjtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmdiYVszXSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmdiYS5wb3AoKTtcclxuICAgICAgICAgICAgICAgIHByZWZpeCA9IFwicmdiKFwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgcmdiYS5qb2luKFwiLFwiKSArIFwiKVwiO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9Ic2xhU3RyaW5nOiBmdW5jdGlvbiB0b0hzbGFTdHJpbmcoKSB7XHJcbiAgICAgICAgICAgIHZhciBwcmVmaXggPSBcImhzbGEoXCIsXHJcbiAgICAgICAgICAgICAgICBoc2xhID0galF1ZXJ5Lm1hcCh0aGlzLmhzbGEoKSwgZnVuY3Rpb24gKHYsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2ID0gaSA+IDIgPyAxIDogMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjYXRjaCAxIGFuZCAyXHJcbiAgICAgICAgICAgICAgICBpZiAoaSAmJiBpIDwgMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHYgPSBNYXRoLnJvdW5kKHYgKiAxMDApICsgXCIlXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaHNsYVszXSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBoc2xhLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgcHJlZml4ID0gXCJoc2woXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIGhzbGEuam9pbihcIixcIikgKyBcIilcIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvSGV4U3RyaW5nOiBmdW5jdGlvbiB0b0hleFN0cmluZyhpbmNsdWRlQWxwaGEpIHtcclxuICAgICAgICAgICAgdmFyIHJnYmEgPSB0aGlzLl9yZ2JhLnNsaWNlKCksXHJcbiAgICAgICAgICAgICAgICBhbHBoYSA9IHJnYmEucG9wKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5jbHVkZUFscGhhKSB7XHJcbiAgICAgICAgICAgICAgICByZ2JhLnB1c2gofiB+KGFscGhhICogMjU1KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBcIiNcIiArIGpRdWVyeS5tYXAocmdiYSwgZnVuY3Rpb24gKHYsIGkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIDAgd2hlbiBudWxscyBleGlzdFxyXG4gICAgICAgICAgICAgICAgdiA9ICh2IHx8IDApLnRvU3RyaW5nKDE2KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2Lmxlbmd0aCA9PSAxID8gXCIwXCIgKyB2IDogdjtcclxuICAgICAgICAgICAgfSkuam9pbihcIlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JnYmFbM10gPT09IDAgPyBcInRyYW5zcGFyZW50XCIgOiB0aGlzLnRvUmdiYVN0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb2xvci5mbi5wYXJzZS5wcm90b3R5cGUgPSBjb2xvci5mbjtcclxuXHJcbiAgICAvLyBoc2xhIGNvbnZlcnNpb25zIGFkYXB0ZWQgZnJvbTpcclxuICAgIC8vIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbS9jb2Rlc2VhcmNoL3AjT0FNbHhfam8tY2svc3JjL3RoaXJkX3BhcnR5L1dlYktpdC9Tb3VyY2UvV2ViQ29yZS9pbnNwZWN0b3IvZnJvbnQtZW5kL0NvbG9yLmpzJmQ9NyZsPTE5M1xyXG5cclxuICAgIGZ1bmN0aW9uIGh1ZTJyZ2IocCwgcSwgaCkge1xyXG4gICAgICAgIGggPSAoaCArIDEpICUgMTtcclxuICAgICAgICBpZiAoaCAqIDYgPCAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiBoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaCAqIDIgPCAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaCAqIDMgPCAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIGgpICogNjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICB9XHJcblxyXG4gICAgc3BhY2VzLmhzbGEudG8gPSBmdW5jdGlvbiAocmdiYSkge1xyXG4gICAgICAgIGlmIChyZ2JhWzBdID09IG51bGwgfHwgcmdiYVsxXSA9PSBudWxsIHx8IHJnYmFbMl0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW251bGwsIG51bGwsIG51bGwsIHJnYmFbM11dO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHJnYmFbMF0gLyAyNTUsXHJcbiAgICAgICAgICAgIGcgPSByZ2JhWzFdIC8gMjU1LFxyXG4gICAgICAgICAgICBiID0gcmdiYVsyXSAvIDI1NSxcclxuICAgICAgICAgICAgYSA9IHJnYmFbM10sXHJcbiAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxyXG4gICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcclxuICAgICAgICAgICAgZGlmZiA9IG1heCAtIG1pbixcclxuICAgICAgICAgICAgYWRkID0gbWF4ICsgbWluLFxyXG4gICAgICAgICAgICBsID0gYWRkICogMC41LFxyXG4gICAgICAgICAgICBoLFxyXG4gICAgICAgICAgICBzO1xyXG5cclxuICAgICAgICBpZiAobWluID09PSBtYXgpIHtcclxuICAgICAgICAgICAgaCA9IDA7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyID09PSBtYXgpIHtcclxuICAgICAgICAgICAgaCA9IDYwICogKGcgLSBiKSAvIGRpZmYgKyAzNjA7XHJcbiAgICAgICAgfSBlbHNlIGlmIChnID09PSBtYXgpIHtcclxuICAgICAgICAgICAgaCA9IDYwICogKGIgLSByKSAvIGRpZmYgKyAxMjA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaCA9IDYwICogKHIgLSBnKSAvIGRpZmYgKyAyNDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobCA9PT0gMCB8fCBsID09PSAxKSB7XHJcbiAgICAgICAgICAgIHMgPSBsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobCA8PSAwLjUpIHtcclxuICAgICAgICAgICAgcyA9IGRpZmYgLyBhZGQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcyA9IGRpZmYgLyAoMiAtIGFkZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbTWF0aC5yb3VuZChoKSAlIDM2MCwgcywgbCwgYSA9PSBudWxsID8gMSA6IGFdO1xyXG4gICAgfTtcclxuXHJcbiAgICBzcGFjZXMuaHNsYS5mcm9tID0gZnVuY3Rpb24gKGhzbGEpIHtcclxuICAgICAgICBpZiAoaHNsYVswXSA9PSBudWxsIHx8IGhzbGFbMV0gPT0gbnVsbCB8fCBoc2xhWzJdID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtudWxsLCBudWxsLCBudWxsLCBoc2xhWzNdXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGggPSBoc2xhWzBdIC8gMzYwLFxyXG4gICAgICAgICAgICBzID0gaHNsYVsxXSxcclxuICAgICAgICAgICAgbCA9IGhzbGFbMl0sXHJcbiAgICAgICAgICAgIGEgPSBoc2xhWzNdLFxyXG4gICAgICAgICAgICBxID0gbCA8PSAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHMsXHJcbiAgICAgICAgICAgIHAgPSAyICogbCAtIHEsXHJcbiAgICAgICAgICAgIHIsXHJcbiAgICAgICAgICAgIGcsXHJcbiAgICAgICAgICAgIGI7XHJcblxyXG4gICAgICAgIHJldHVybiBbTWF0aC5yb3VuZChodWUycmdiKHAsIHEsIGggKyAxIC8gMykgKiAyNTUpLCBNYXRoLnJvdW5kKGh1ZTJyZ2IocCwgcSwgaCkgKiAyNTUpLCBNYXRoLnJvdW5kKGh1ZTJyZ2IocCwgcSwgaCAtIDEgLyAzKSAqIDI1NSksIGFdO1xyXG4gICAgfTtcclxuXHJcbiAgICBlYWNoKHNwYWNlcywgZnVuY3Rpb24gKHNwYWNlTmFtZSwgc3BhY2UpIHtcclxuICAgICAgICB2YXIgcHJvcHMgPSBzcGFjZS5wcm9wcyxcclxuICAgICAgICAgICAgY2FjaGUgPSBzcGFjZS5jYWNoZSxcclxuICAgICAgICAgICAgdG8gPSBzcGFjZS50byxcclxuICAgICAgICAgICAgZnJvbSA9IHNwYWNlLmZyb207XHJcblxyXG4gICAgICAgIC8vIG1ha2VzIHJnYmEoKSBhbmQgaHNsYSgpXHJcbiAgICAgICAgY29sb3IuZm5bc3BhY2VOYW1lXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgLy8gZ2VuZXJhdGUgYSBjYWNoZSBmb3IgdGhpcyBzcGFjZSBpZiBpdCBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAgICAgIGlmICh0byAmJiAhdGhpc1tjYWNoZV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXNbY2FjaGVdID0gdG8odGhpcy5fcmdiYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhY2hlXS5zbGljZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IGpRdWVyeS50eXBlKHZhbHVlKSxcclxuICAgICAgICAgICAgICAgIGFyciA9IHR5cGUgPT09IFwiYXJyYXlcIiB8fCB0eXBlID09PSBcIm9iamVjdFwiID8gdmFsdWUgOiBhcmd1bWVudHMsXHJcbiAgICAgICAgICAgICAgICBsb2NhbCA9IHRoaXNbY2FjaGVdLnNsaWNlKCksXHJcbiAgICAgICAgICAgICAgICByZXQ7XHJcblxyXG4gICAgICAgICAgICBlYWNoKHByb3BzLCBmdW5jdGlvbiAoa2V5LCBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gYXJyW3R5cGUgPT09IFwib2JqZWN0XCIgPyBrZXkgOiBwcm9wLmlkeF07XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWwgPSBsb2NhbFtwcm9wLmlkeF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsb2NhbFtwcm9wLmlkeF0gPSBjbGFtcCh2YWwsIHByb3ApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmcm9tKSB7XHJcbiAgICAgICAgICAgICAgICByZXQgPSBjb2xvcihmcm9tKGxvY2FsKSk7XHJcbiAgICAgICAgICAgICAgICByZXRbY2FjaGVdID0gbG9jYWw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yKGxvY2FsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIG1ha2VzIHJlZCgpIGdyZWVuKCkgYmx1ZSgpIGFscGhhKCkgaHVlKCkgc2F0dXJhdGlvbigpIGxpZ2h0bmVzcygpXHJcbiAgICAgICAgZWFjaChwcm9wcywgZnVuY3Rpb24gKGtleSwgcHJvcCkge1xyXG4gICAgICAgICAgICAvLyBhbHBoYSBpcyBpbmNsdWRlZCBpbiBtb3JlIHRoYW4gb25lIHNwYWNlXHJcbiAgICAgICAgICAgIGlmIChjb2xvci5mbltrZXldKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29sb3IuZm5ba2V5XSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZ0eXBlID0galF1ZXJ5LnR5cGUodmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgIGZuID0ga2V5ID09PSAnYWxwaGEnID8gdGhpcy5faHNsYSA/ICdoc2xhJyA6ICdyZ2JhJyA6IHNwYWNlTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbCA9IHRoaXNbZm5dKCksXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyID0gbG9jYWxbcHJvcC5pZHhdLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh2dHlwZSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZ0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNhbGwodGhpcywgY3VyKTtcclxuICAgICAgICAgICAgICAgICAgICB2dHlwZSA9IGpRdWVyeS50eXBlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIHByb3AuZW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2dHlwZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoID0gcnBsdXNlcXVhbHMuZXhlYyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY3VyICsgcGFyc2VGbG9hdChtYXRjaFsyXSkgKiAobWF0Y2hbMV0gPT09IFwiK1wiID8gMSA6IC0xKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsb2NhbFtwcm9wLmlkeF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2ZuXShsb2NhbCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBhZGQgLmZ4LnN0ZXAgZnVuY3Rpb25zXHJcbiAgICBlYWNoKHN0ZXBIb29rcywgZnVuY3Rpb24gKGksIGhvb2spIHtcclxuICAgICAgICBqUXVlcnkuY3NzSG9va3NbaG9va10gPSB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KGVsZW0sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChqUXVlcnkudHlwZSh2YWx1ZSkgIT09ICdzdHJpbmcnIHx8IChwYXJzZWQgPSBzdHJpbmdQYXJzZSh2YWx1ZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjb2xvcihwYXJzZWQgfHwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3VwcG9ydC5yZ2JhICYmIHZhbHVlLl9yZ2JhWzNdICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYWNrZ3JvdW5kQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJFbGVtID0gaG9vayA9PT0gXCJiYWNrZ3JvdW5kQ29sb3JcIiA/IGVsZW0ucGFyZW50Tm9kZSA6IGVsZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IGpRdWVyeS5jdXJDU1MoY3VyRWxlbSwgXCJiYWNrZ3JvdW5kQ29sb3JcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKChiYWNrZ3JvdW5kQ29sb3IgPT09IFwiXCIgfHwgYmFja2dyb3VuZENvbG9yID09PSBcInRyYW5zcGFyZW50XCIpICYmIChjdXJFbGVtID0gY3VyRWxlbS5wYXJlbnROb2RlKSAmJiBjdXJFbGVtLnN0eWxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuYmxlbmQoYmFja2dyb3VuZENvbG9yICYmIGJhY2tncm91bmRDb2xvciAhPT0gXCJ0cmFuc3BhcmVudFwiID8gYmFja2dyb3VuZENvbG9yIDogXCJfZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9SZ2JhU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbGVtLnN0eWxlW2hvb2tdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGpRdWVyeS5meC5zdGVwW2hvb2tdID0gZnVuY3Rpb24gKGZ4KSB7XHJcbiAgICAgICAgICAgIGlmICghZnguY29sb3JJbml0KSB7XHJcbiAgICAgICAgICAgICAgICBmeC5zdGFydCA9IGNvbG9yKGZ4LmVsZW0sIGhvb2spO1xyXG4gICAgICAgICAgICAgICAgZnguZW5kID0gY29sb3IoZnguZW5kKTtcclxuICAgICAgICAgICAgICAgIGZ4LmNvbG9ySW5pdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgalF1ZXJ5LmNzc0hvb2tzW2hvb2tdLnNldChmeC5lbGVtLCBmeC5zdGFydC50cmFuc2l0aW9uKGZ4LmVuZCwgZngucG9zKSk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGRldGVjdCByZ2JhIHN1cHBvcnRcclxuICAgIGpRdWVyeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXHJcbiAgICAgICAgICAgIGRpdl9zdHlsZSA9IGRpdi5zdHlsZTtcclxuXHJcbiAgICAgICAgZGl2X3N0eWxlLmNzc1RleHQgPSBcImJhY2tncm91bmQtY29sb3I6cmdiYSgxLDEsMSwuNSlcIjtcclxuICAgICAgICBzdXBwb3J0LnJnYmEgPSBkaXZfc3R5bGUuYmFja2dyb3VuZENvbG9yLmluZGV4T2YoXCJyZ2JhXCIpID4gLTE7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTb21lIG5hbWVkIGNvbG9ycyB0byB3b3JrIHdpdGhcclxuICAgIC8vIEZyb20gSW50ZXJmYWNlIGJ5IFN0ZWZhbiBQZXRyZVxyXG4gICAgLy8gaHR0cDovL2ludGVyZmFjZS5leWVjb24ucm8vXHJcbiAgICBjb2xvcnMgPSBqUXVlcnkuQ29sb3IubmFtZXMgPSB7XHJcbiAgICAgICAgYXF1YTogXCIjMDBmZmZmXCIsXHJcbiAgICAgICAgYXp1cmU6IFwiI2YwZmZmZlwiLFxyXG4gICAgICAgIGJlaWdlOiBcIiNmNWY1ZGNcIixcclxuICAgICAgICBibGFjazogXCIjMDAwMDAwXCIsXHJcbiAgICAgICAgYmx1ZTogXCIjMDAwMGZmXCIsXHJcbiAgICAgICAgYnJvd246IFwiI2E1MmEyYVwiLFxyXG4gICAgICAgIGN5YW46IFwiIzAwZmZmZlwiLFxyXG4gICAgICAgIGRhcmtibHVlOiBcIiMwMDAwOGJcIixcclxuICAgICAgICBkYXJrY3lhbjogXCIjMDA4YjhiXCIsXHJcbiAgICAgICAgZGFya2dyZXk6IFwiI2E5YTlhOVwiLFxyXG4gICAgICAgIGRhcmtncmVlbjogXCIjMDA2NDAwXCIsXHJcbiAgICAgICAgZGFya2toYWtpOiBcIiNiZGI3NmJcIixcclxuICAgICAgICBkYXJrbWFnZW50YTogXCIjOGIwMDhiXCIsXHJcbiAgICAgICAgZGFya29saXZlZ3JlZW46IFwiIzU1NmIyZlwiLFxyXG4gICAgICAgIGRhcmtvcmFuZ2U6IFwiI2ZmOGMwMFwiLFxyXG4gICAgICAgIGRhcmtvcmNoaWQ6IFwiIzk5MzJjY1wiLFxyXG4gICAgICAgIGRhcmtyZWQ6IFwiIzhiMDAwMFwiLFxyXG4gICAgICAgIGRhcmtzYWxtb246IFwiI2U5OTY3YVwiLFxyXG4gICAgICAgIGRhcmt2aW9sZXQ6IFwiIzk0MDBkM1wiLFxyXG4gICAgICAgIGZ1Y2hzaWE6IFwiI2ZmMDBmZlwiLFxyXG4gICAgICAgIGdvbGQ6IFwiI2ZmZDcwMFwiLFxyXG4gICAgICAgIGdyZWVuOiBcIiMwMDgwMDBcIixcclxuICAgICAgICBpbmRpZ286IFwiIzRiMDA4MlwiLFxyXG4gICAgICAgIGtoYWtpOiBcIiNmMGU2OGNcIixcclxuICAgICAgICBsaWdodGJsdWU6IFwiI2FkZDhlNlwiLFxyXG4gICAgICAgIGxpZ2h0Y3lhbjogXCIjZTBmZmZmXCIsXHJcbiAgICAgICAgbGlnaHRncmVlbjogXCIjOTBlZTkwXCIsXHJcbiAgICAgICAgbGlnaHRncmV5OiBcIiNkM2QzZDNcIixcclxuICAgICAgICBsaWdodHBpbms6IFwiI2ZmYjZjMVwiLFxyXG4gICAgICAgIGxpZ2h0eWVsbG93OiBcIiNmZmZmZTBcIixcclxuICAgICAgICBsaW1lOiBcIiMwMGZmMDBcIixcclxuICAgICAgICBtYWdlbnRhOiBcIiNmZjAwZmZcIixcclxuICAgICAgICBtYXJvb246IFwiIzgwMDAwMFwiLFxyXG4gICAgICAgIG5hdnk6IFwiIzAwMDA4MFwiLFxyXG4gICAgICAgIG9saXZlOiBcIiM4MDgwMDBcIixcclxuICAgICAgICBvcmFuZ2U6IFwiI2ZmYTUwMFwiLFxyXG4gICAgICAgIHBpbms6IFwiI2ZmYzBjYlwiLFxyXG4gICAgICAgIHB1cnBsZTogXCIjODAwMDgwXCIsXHJcbiAgICAgICAgdmlvbGV0OiBcIiM4MDAwODBcIixcclxuICAgICAgICByZWQ6IFwiI2ZmMDAwMFwiLFxyXG4gICAgICAgIHNpbHZlcjogXCIjYzBjMGMwXCIsXHJcbiAgICAgICAgd2hpdGU6IFwiI2ZmZmZmZlwiLFxyXG4gICAgICAgIHllbGxvdzogXCIjZmZmZjAwXCIsXHJcbiAgICAgICAgdHJhbnNwYXJlbnQ6IFtudWxsLCBudWxsLCBudWxsLCAwXSxcclxuICAgICAgICBfZGVmYXVsdDogXCIjZmZmZmZmXCJcclxuICAgIH07XHJcbn0pKGpRdWVyeSk7Il19
