"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};!function(e){function i(e,i,n,l,o){if(i.items.filter("li:eq("+l+")").addClass("active").siblings(".active").removeClass("active"),"undefined"==typeof o&&(o="fast"),o)i.animate({scrollLeft:n},o,function(){t(i)});else{i.scrollLeft(n),t(i)}}function t(e){var i=e.items.filter(".active");if(i.hasClass("-before")){var t=i.prevAll().size();i.removeClass("active"),i=e.items.filter(":not(.-before):eq("+t+")").addClass("active"),e.scrollLeft(e.scrollLeft()+i.position().left)}else if(i.hasClass("-after")){var t=i.prevAll(".-after").size();i.removeClass("active"),i=e.items.filter(":not(.-before):eq("+t+")").addClass("active"),e.scrollLeft(e.scrollLeft()+i.position().left)}}var n={init:function(t){var t=e.extend({},e.fn.lemmonSlider.defaults,t);return this.each(function(){var n=e(this),l=n.data("slider");if(!l){var o=n.find(t.slider),r=n.next().filter(".controls"),s=o.find(t.items),f=1;s.each(function(){f+=e(this).outerWidth(!0)}),o.width(f),t.slideToLast&&o.css("padding-right",n.width()),t.infinite&&(n.attr("data-slider-infinite",!0),f=3*f,o.width(f),s.clone().addClass("-after").insertAfter(s.filter(":last")),s.filter(":first").before(s.clone().addClass("-before")),s=o.find(t.items)),n.items=s,n.options=t,n.bind("nextSlide",function(l,r){var f=n.scrollLeft(),d=0,a=0;s.each(function(i){0==d&&e(this).position().left>1&&(d=e(this).position().left,a=i)}),d>0&&o.outerWidth()-f-n.width()-1>0?i(l,n,f+d,a,"fast"):t.loop&&i(l,n,0,0,"slow")}),n.bind("prevSlide",function(l,r){var f=n.scrollLeft(),d=0,a=0;if(s.each(function(i){e(this).position().left<0&&(d=e(this).position().left,a=i)}),d)i(l,n,f+d,a,"fast");else if(t.loop){var c=o.outerWidth()-n.width(),u=s.filter(":last").position().left;a=s.size()-1,c>u?i(l,n,u,a,"fast"):i(l,n,c,a,"fast")}}),n.bind("nextPage",function(l,o){var r=n.scrollLeft(),d=n.width(),a=0,c=0;s.each(function(i){e(this).position().left<d&&(a=e(this).position().left,c=i)}),a>0&&f>r+d+1?i(l,n,r+a,c,"slow"):t.loop&&i(l,n,0,0,"slow")}),n.bind("prevPage",function(l,r){var f=n.scrollLeft(),d=n.width(),a=0;if(s.each(function(i){e(this).position().left<1-d&&(a=e(this).next().position().left,slide=i)}),f)0==a?i(l,n,0,0,"slow"):i(l,n,f+a,slide,"slow");else if(t.loop){var c=o.outerWidth()-n.width(),u=s.filter(":last").position().left;c>u?n.animate({scrollLeft:u},"slow"):n.animate({scrollLeft:c},"slow")}}),n.bind("slideTo",function(e,t,l){i(e,n,n.scrollLeft()+s.filter(":eq("+t+")").position().left,t,l)}),r.find(".next-slide").click(function(){return n.trigger("nextSlide"),!1}),r.find(".prev-slide").click(function(){return n.trigger("prevSlide"),!1}),r.find(".next-page").click(function(){return n.trigger("nextPage"),!1}),r.find(".prev-page").click(function(){return n.trigger("prevPage"),!1}),n.data("slider",{target:n,options:t})}})},addItem:function(i){var i=e.extend({},e.fn.lemmonSlider.defaults,i),t=e(this),l=t.find(i.slider);t.next().filter(".controls"),l.find(i.items);return i.infinite=t.attr("data-slider-infinite"),i.item?(n.destroy.apply(this),i.prepend?l.prepend(i.item):l.append(i.item),void n.init.apply(this,[i])):!1},destroy:function(){return this.each(function(){var i=e(this),t=i.next().filter(".controls"),n=i.find("> *:first > *");i.data("slider");i.unbind("nextSlide"),i.unbind("prevSlide"),i.unbind("nextPage"),i.unbind("prevPage"),i.unbind("slideTo"),t.find(".next-slide").unbind("click"),t.find(".prev-slide").unbind("click"),t.find(".next-page").unbind("click"),t.find(".next-page").unbind("click"),i.removeData("slider"),i.attr("data-slider-infinite")&&e.merge(n.filter(".-before"),n.filter(".-after")).each(function(i,t){e(t).remove()})})}};e.fn.lemmonSlider=function(i,t){return null==t&&(t={}),n[i]?n[i].apply(this,Array.prototype.slice.call(arguments,1)):"object"!==("undefined"==typeof i?"undefined":_typeof(i))&&i?void e.error("Method "+i+" does not exist on jQuery.lemmonSlider"):n.init.apply(this,arguments)},e.fn.lemmonSlider.defaults={items:"> *",loop:!0,slideToLast:!1,slider:"> *:first",infinite:!1}}(jQuery);
//# sourceMappingURL=data:application/json;base64,
